<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataAccess.Core</name>
    </assembly>
    <members>
        <member name="T:DataAccess.Core.AdditionalInitFunction">
            <summary>
            Represents a function to be called on object for additional initialization
            </summary>
        </member>
        <member name="M:DataAccess.Core.AdditionalInitFunction.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Default constructor
            </summary>
            <param name="MethodInfo">The method info to invoke with</param>
        </member>
        <member name="M:DataAccess.Core.AdditionalInitFunction.Invoke(DataAccess.Core.Interfaces.IDataStore,System.Object)">
            <summary>
            Invokes the additional init function on an object
            </summary>
            <param name="store">The IDatastore that loaded the object</param>
            <param name="item">The object</param>
        </member>
        <member name="P:DataAccess.Core.AdditionalInitFunction.StaticMethod">
            <summary>
            Will be true if the method is static
            </summary>
        </member>
        <member name="T:DataAccess.Core.Attributes.AdditionalInitAttribute">
            <summary>
            Indicates that the function should be called when an object is loaded (Can optionally accept an IDataStore)
            </summary>
        </member>
        <member name="T:DataAccess.Core.Attributes.BypassValidationAttribute">
            <summary>
            Indicates that the type should not be validated against the db schema, useful for views and stored procedures
            </summary>
        </member>
        <member name="T:DataAccess.Core.Attributes.FieldType">
            <summary>
            Allows you to specify the type mapping CLR->DB,
            Its worth noting, not all datastores support all types, in this case a different type will be chosen
            most types will list the fallbacks (depending on datastore)
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.Default">
            <summary>
            Will use the default type mapping
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.UserString">
            <summary>
            Use this if you want to specify a user string for the field type,
            this option is not cross db compatible and is passed straight to the db,
            this option also requires the use of the FieldTypeString
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.String">
            <summary>
            varchar
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.UnicodeString">
            <summary>
            nvarchar
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.Date">
            <summary>
            date -> string
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.Bool">
            <summary>
            boolean -> bit -> int(1)
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.Int">
            <summary>
            int
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.Long">
            <summary>
            bigint
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.Real">
            <summary>
            real
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.Binary">
            <summary>
            longblob, varbinary(MAX)
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.Char">
            <summary>
            generally varchar(1)
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.UnicodeChar">
            <summary>
            nvarchar(1)
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.Text">
            <summary>
            text
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.Time">
            <summary>
            time -> string 
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.UnicodeText">
            <summary>
            ntext
            </summary>
        </member>
        <member name="F:DataAccess.Core.Attributes.FieldType.Money">
            <summary>
            ntext
            </summary>
        </member>
        <member name="T:DataAccess.Core.Attributes.QueryPredicateAttribute">
            <summary>
            Indicates the object needs to a query predicate
            </summary>
        </member>
        <member name="T:DataAccess.Core.Attributes.DataFieldAttribute">
            <summary>
            Indicates that one or more conventions about a data field need to be changed
            </summary>
        </member>
        <member name="M:DataAccess.Core.Attributes.DataFieldAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:DataAccess.Core.Attributes.DataFieldAttribute.FieldName">
            <summary>
            Defaults to property name
            </summary>
        </member>
        <member name="P:DataAccess.Core.Attributes.DataFieldAttribute.SetOnInsert">
            <summary>
            Indicates if the field should be set on insert or not, defaults to true
            </summary>
        </member>
        <member name="P:DataAccess.Core.Attributes.DataFieldAttribute.LoadField">
            <summary>
            Indicates
            </summary>
        </member>
        <member name="P:DataAccess.Core.Attributes.DataFieldAttribute.DefaultValue">
            <summary>
            Indicates the default value of this field, defaults to null
            </summary>
        </member>
        <member name="P:DataAccess.Core.Attributes.DataFieldAttribute.FieldTypeString">
            <summary>
            Indicates the Data type of the data store field, this string is passed straight to the underlying datastore unchanged
            </summary>
        </member>
        <member name="P:DataAccess.Core.Attributes.DataFieldAttribute.FieldType">
            <summary>
            Allows the user to override a field type mapping in a cross db manner
            </summary>
        </member>
        <member name="P:DataAccess.Core.Attributes.DataFieldAttribute.FieldLength">
            <summary>
            Set to override the field length from whatever the default happens to be, not supported for all data types
            -1 means 'use the default'
            </summary>
        </member>
        <member name="P:DataAccess.Core.Attributes.DataFieldAttribute.PrimaryKeyType">
            <summary>
            Indicates the type that this field relates to (FK relationship), defaults to null
            </summary>
        </member>
        <member name="P:DataAccess.Core.Attributes.DataFieldAttribute.RelationshipType">
            <summary>
            Indicates the type of fk relationship to generate
            </summary>
        </member>
        <member name="T:DataAccess.Core.Attributes.IgnoredFieldAttribute">
            <summary>
            Indicates that a field should be ignored, useful for calculated fields
            </summary>
        </member>
        <member name="T:DataAccess.Core.Attributes.KeyAttribute">
            <summary>
            Indicates that a field represents the primary key of an object
            </summary>
        </member>
        <member name="M:DataAccess.Core.Attributes.KeyAttribute.#ctor">
            <summary>
            Default constructor, initializes SetOnInsert=false
            </summary>
        </member>
        <member name="T:DataAccess.Core.Attributes.OnTableCreateAttribute">
            <summary>
            Indicates a function should be called when a table is created (Can optimally accept an IDataStore), must be static
            </summary>
        </member>
        <member name="T:DataAccess.Core.Attributes.TableNameAttribute">
            <summary>
            Allows the table name/schema to be specified
            </summary>
        </member>
        <member name="P:DataAccess.Core.Attributes.TableNameAttribute.TableName">
            <summary>
            Indicates the table name
            </summary>
        </member>
        <member name="P:DataAccess.Core.Attributes.TableNameAttribute.Schema">
            <summary>
            Indicates the tables schema
            </summary>
        </member>
        <member name="T:DataAccess.Core.Attributes.ViewAttribute">
            <summary>
            Decorate to indicate an object is loaded from a view
            </summary>
        </member>
        <member name="M:DataAccess.Core.Attributes.ViewAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Interfaces.IConvertToDatastore">
            <summary>
            Represents a class that knows how to convert a CLR type to DataStore types
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IConvertToDatastore.MapFieldType(DataAccess.Core.Attributes.FieldType,DataAccess.Core.Data.DataFieldInfo)">
            <summary>
            Used when the user wishes to override the datafield type
            </summary>
            <param name="type">The requested type</param>
            <param name="dfi">The rest of the data</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IConvertToDatastore.MapType(System.Type,DataAccess.Core.Data.DataFieldInfo)">
            <summary>
            The Default type mapper for a datastore
            </summary>
            <param name="type">The data type to map</param>
            <param name="dField">The rest of the daata</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Conversion.StandardDBConverter.ResolveLength(System.Nullable{System.Int32},System.String)">
            <summary>
            Resolves the length for a field
            </summary>
            <param name="userSpecified">The user specified length</param>
            <param name="default">The default length</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.DatabaseCommand`1">
            <summary>
            A Helper class for when you need to deal directly with the database
            </summary>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.SetCommandText(System.String)">
            <summary>
            Sets the command text for execution
            </summary>
            <param name="cmd">The command text</param>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.SetCommandText(System.String,System.String,System.String)">
            <summary>
            Sets the command text for execution
            </summary>
            <param name="cmd">The command text</param>
            <param name="FieldMarker">This marker in the command text will be replaced with the field list</param>
            <param name="TableNameMarker">This marker in the command text will be replaced with the table name</param>
            <typeparam name="T">The type to pull info from</typeparam>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.SetParameters(System.Object)">
            <summary>
            Sets the parameters on the object based on a parameter object
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteCommand">
            <summary>
            Executes a command and return the number of rows updated
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteCommandGetList">
            <summary>
            Executes the current command and gets a list of objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteCommandGetObject">
            <summary>
            Executes the current command and gets the first item
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteAsStoredProcedureGetList">
            <summary>
            Executes the current command as a stored procedure and gets a list of items
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteAsStoredProcedureGetObject">
            <summary>
            Executes the current command as a stored procedure and get the first item
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteStoredProcedure(System.String,System.Object)">
            <summary>
            Executes a command as stored procedure
            </summary>
            <param name="command">The command text</param>
            <param name="parameters">The parameters</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteStoredProcedureGetObject(System.String,System.Object)">
            <summary>
            Executes a command as stored procedure
            </summary>
            <param name="command">The command text</param>
            <param name="parameters">The parameters</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteStoredProcedure(System.String)">
            <summary>
            Executes a command as stored procedure
            </summary>
            <param name="command">The command text</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteStoredProcedureGetObject(System.String)">
            <summary>
            Executes a command as stored procedure
            </summary>
            <param name="command">The command text</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteQuery(System.String,System.Object)">
            <summary>
            Executes a query
            </summary>
            <param name="command">The command text</param>
            <param name="parameters">The parameters</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteQueryGetObject(System.String,System.Object)">
            <summary>
            Executes a query
            </summary>
            <param name="command">The command text</param>
            <param name="parameters">The parameters</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteQuery(System.String)">
            <summary>
            Executes a query
            </summary>
            <param name="command">The command text</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteQueryGetObject(System.String)">
            <summary>
            Executes a query
            </summary>
            <param name="command">The command text</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteDBCommand(System.String)">
            <summary>
            Executues a DB command and reutrns the rows affected as reported by the datastore
            </summary>
            <param name="command">The command text</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommand`1.ExecuteDBCommand(System.String,System.Object)">
            <summary>
            Executues a DB command and reutrns the rows affected as reported by the datastore
            </summary>
            /// <param name="command">The command text</param>
            <param name="parameters">The parameters</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.DataStore">
            <summary>
            A data store
            </summary>
        </member>
        <member name="T:DataAccess.Core.Interfaces.IDataStore">
            <summary>
            Represents a data store
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.ExecuteQuery(System.Data.IDbCommand)">
            <summary>
            Executes a command
            </summary>
            <param name="command">The command to execute</param>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.InsertObject(System.Object)">
            <summary>
            Inserts an object
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.LoadObject(System.Type,System.Object)">
            <summary>
            Loads an object
            </summary>
            <param name="item">The type to load</param>
            <param name="PrimaryKey">The primary key.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.LoadObject``1(System.Object)">
            <summary>
            Loads an object
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="PrimaryKey">The primary key.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.LoadObjects``1(System.Collections.IEnumerable)">
            <summary>
            Loads a list of objects from the data store
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="Ids">The primary key(s)</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.LoadObject(System.Type,System.Object,System.Boolean)">
            <summary>
            Loads an object.
            </summary>
            <param name="item">The type to load.</param>
            <param name="key">The primary field</param>
            <param name="LoadAllFields">if set to <c>true</c> [The load field attribute tag is ignored].</param>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.LoadObject``1(System.Object,System.Boolean)">
            <summary>
            Loads an object
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="PrimaryKey">The primary key</param>
            <param name="LoadAllFields">if set to <c>true</c> [The load field attribute tag is ignored].</param>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.DeleteObject(System.Type,System.Object)">
            <summary>
            Deletes an object
            </summary>
            <param name="item">The type to delete</param>
            <param name="key">The primary key to delete on</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.DeleteObject``1(System.Object)">
            <summary>
            Deletes an object
            </summary>
            <typeparam name="T">The type to delete</typeparam>
            <param name="primaryKey">The primary key to delete on></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.DeleteObjects``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Deletes objects based on an expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="criteria"></param>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.LoadEntireTable(System.Type)">
            <summary>
            Loads an entire table
            </summary>
            <param name="item">The type to load</param>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.LoadEntireTable``1">
            <summary>
            Loads an entire table
            </summary>
            <typeparam name="T">The type to load</typeparam>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.GetTableName(System.Type)">
            <summary>
            Returns the resolved table name for a type
            </summary>
            <param name="t">The type</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.GetTableName``1">
            <summary>
            Returns the resolved table name for a type
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.ExecuteCommandLoadList(System.Type,System.Data.IDbCommand)">
            <summary>
            Executes a command and loads a list
            </summary>
            <param name="objectType">The type to load in the list</param>
            <param name="command">The command to execute</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.ExecuteCommandLoadList``1(System.Data.IDbCommand)">
            <summary>
            Executes a command and loads a list
            </summary>
            <typeparam name="T">The type to load in the list</typeparam>
            <param name="command">The command to execute</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.ExecuteCommandLoadObject``1(System.Data.IDbCommand)">
            <summary>
            Execute a command an loads an object
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="command">The command to execute</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.GetCommand``1">
            <summary>
            Returns a helper for dealing with the db directly
            </summary>
            <typeparam name="T">The type you are dealing with on the return side</typeparam>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.GetKeyForItemType(System.Type,System.Object)">
            <summary>
            Returns the key value for an object
            </summary>
            <param name="type">The type to check</param>
            <param name="item">The object to extract from</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.LoadObject(System.Object)">
            <summary>
            Loads an object from the data store, the key must be set
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.LoadObject(System.Object,System.Boolean)">
            <summary>
            Loads an object from the data store, the key must be set
            </summary>
            <param name="item">The object to load</param>
            <param name="LoadAllFields">If true the loadfield=false will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.InsertObjects(System.Collections.IList)">
            <summary>
            Inserts a list of items into the data store
            </summary>
            <param name="items">The items to insert</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.IsNew(System.Object)">
            <summary>
            Determines if an object already exists in the data store, based on the primary key
            </summary>
            <param name="item">The object to check</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.SaveObject(System.Object)">
            <summary>
            Will do an insert or update as appropriate to persist your data
            Note: This method will determine what operation is required by calling IsNew()
            </summary>
            <param name="item">The item to persist</param>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.UpdateObject(System.Object)">
            <summary>
            Updates an object on the data store, primary key must be set
            </summary>
            <param name="item">The item to update</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.UpdateObjects``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Updates all items in the list, primary keys must be set
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns>The items that failed to update</returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.DeleteObject(System.Object)">
            <summary>
            Deletes an objet from the data store, primary key must be set
            </summary>
            <param name="item">The item to remove</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.ExecuteCommand(System.Data.IDbCommand)">
            <summary>
            Executes a command on the data store
            </summary>
            <param name="command">The command to execute</param>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.GetSelectList(System.Type)">
            <summary>
            Returns a comma separated list of the fields on an object
            </summary>
            <param name="t">The type</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.GetSelectList``1">
            <summary>
            Returns a comma separated list of the fields on an object
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.Query``1">
            <summary>
            This function will return an IQueryable appropriate for using with LINQ
            </summary>
            <typeparam name="T">The type to query</typeparam>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.GetQueryMapper">
            <summary>
            Returns the query mapper to use when doing LINQ
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.StartTransaction">
            <summary>
            Inits a transction scope for the command executor
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataStore.GetNewInstance">
            <summary>
            Returns a new instance of a data store on the same connection
            </summary>
            <returns></returns>
        </member>
        <member name="E:DataAccess.Core.Interfaces.IDataStore.ObjectLoaded">
            <summary>
            This event will fire anytime an object is being loaded
            </summary>
        </member>
        <member name="E:DataAccess.Core.Interfaces.IDataStore.ObjectDeleting">
            <summary>
            This event will fire just before an object is deleted
            </summary>
        </member>
        <member name="E:DataAccess.Core.Interfaces.IDataStore.ObjectDeleted">
            <summary>
            This event will fire just after an object is deleted
            </summary>
        </member>
        <member name="E:DataAccess.Core.Interfaces.IDataStore.ObjectUpdating">
            <summary>
            This event will fire just before an object is updated
            </summary>
        </member>
        <member name="E:DataAccess.Core.Interfaces.IDataStore.ObjectUpdated">
            <summary>
            This event will fire just after an object is updated
            </summary>
        </member>
        <member name="E:DataAccess.Core.Interfaces.IDataStore.ObjectInserting">
            <summary>
            This event will fire just before an object is inserted
            </summary>
        </member>
        <member name="E:DataAccess.Core.Interfaces.IDataStore.ObjectInserted">
            <summary>
            This event will fire just after an object is inserted
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDataStore.Connection">
            <summary>
            Gets or sets the DataConnection
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDataStore.ExecuteCommands">
            <summary>
            Gets or sets the command executor
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDataStore.TypeInformationParser">
            <summary>
            Gets or sets the type information parser.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDataStore.SchemaValidator">
            <summary>
            Gets or sets the schema validator.
            </summary>
            <value>The schema validator.</value>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDataStore.ObjectFinder">
            <summary>
            Determines how to search for data store objects based on a CLR type
            </summary>
        </member>
        <member name="M:DataAccess.Core.DataStore.CreateObjectSetKey(System.Type,System.Object)">
            <summary>
            Creates an object and inits the primary key field
            </summary>
            <param name="item">The item.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.CreateObjectSetKey(System.Type,System.Object,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Creates an object and inits the primary key field
            </summary>
            <param name="item">The item.</param>
            <param name="key">The key.</param>
            <param name="ti">The type info.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.#ctor">
            <summary>
            Empty constructor, will not properly setup this class. to be used by sub classes only
            </summary>
        </member>
        <member name="M:DataAccess.Core.DataStore.#ctor(DataAccess.Core.Interfaces.IDataConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.DataStore"/> class.
            </summary>
            <param name="Connection">The data connection</param>
        </member>
        <member name="M:DataAccess.Core.DataStore.#ctor(DataAccess.Core.Interfaces.IDataConnection,DataAccess.Core.Interfaces.IExecuteDatabaseCommand,DataAccess.Core.Interfaces.ITypeInformationParser)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.DataStore"/> class.
            </summary>
            <param name="Connection">The data connection.</param>
            <param name="ExecuteComamands">The command executor.</param>
            <param name="TypeParser">The type parser.</param>
        </member>
        <member name="M:DataAccess.Core.DataStore.LoadObject(System.Object)">
            <summary>
            Loads an object from the data store, the key must be set
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.LoadObject(System.Object,System.Boolean)">
            <summary>
            Loads an object from the data store, the key must be set
            </summary>
            <param name="item">The object to load</param>
            <param name="LoadAllFields">If true the loadfield=false will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.LoadObject(System.Type,System.Object)">
            <summary>
            Loads an object
            </summary>
            <param name="item">The type to load</param>
            <param name="PrimaryKey">The primary key.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.LoadObject``1(System.Object)">
            <summary>
            Loads an object
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="PrimaryKey">The primary key.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.LoadObject``1(System.Object,System.Boolean)">
            <summary>
            Loads an object
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="PrimaryKey">The primary key</param>
            <param name="LoadAllFields">if set to <c>true</c> [The load field attribute tag is ignored].</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.LoadObject(System.Type,System.Object,System.Boolean)">
            <summary>
            Loads an object.
            </summary>
            <param name="item">The type to load.</param>
            <param name="key">The primary field</param>
            <param name="LoadAllFields">if set to <c>true</c> [The load field attribute tag is ignored].</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.InsertObject(System.Object)">
            <summary>
            Inserts an object
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.InsertObjects(System.Collections.IList)">
            <summary>
            Inserts a list of items into the data store
            </summary>
            <param name="items">The items to insert</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.DeleteObject(System.Type,System.Object)">
            <summary>
            Deletes an object
            </summary>
            <param name="item">The type to delete</param>
            <param name="key">The primary key to delete on</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.DeleteObject(System.Object)">
            <summary>
            Deletes an objet from the data store, primary key must be set
            </summary>
            <param name="item">The item to remove</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.DeleteObject``1(System.Object)">
            <summary>
            Deletes an object
            </summary>
            <typeparam name="T">The type to delete</typeparam>
            <param name="primaryKey">The primary key to delete on></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.LoadEntireTable(System.Type)">
            <summary>
            Loads an entire table
            </summary>
            <param name="item">The type to load</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.LoadEntireTable``1">
            <summary>
            Loads an entire table
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.GetTableName(System.Type)">
            <summary>
            Returns the resolved table name for a type
            </summary>
            <param name="t">The type</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.GetTableName``1">
            <summary>
            Returns the resolved table name for a type
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.GetKeyForItemType(System.Type,System.Object)">
            <summary>
            Returns the key value for an object
            </summary>
            <param name="type">The type to check</param>
            <param name="item">The object to extract from</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.IsNew(System.Object)">
            <summary>
            Determines if an object already exists in the data store, based on the primary key
            </summary>
            <param name="item">The object to check</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.SaveObject(System.Object)">
            <summary>
            Will do an insert or update as appropriate to persist your data
            Note: This method will determine what operation is required by calling IsNew()
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DataAccess.Core.DataStore.UpdateObject(System.Object)">
            <summary>
            Updates an object on the data store, primary key must be set
            </summary>
            <param name="item">The item to update</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.ExecuteCommand(System.Data.IDbCommand)">
            <summary>
            Executes a command on the data store
            </summary>
            <param name="command">The command to execute</param>
        </member>
        <member name="M:DataAccess.Core.DataStore.ExecuteCommandLoadObject``1(System.Data.IDbCommand)">
            <summary>
            Execute a command and loads an object
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="command">The command to execute</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.ExecuteCommandLoadList(System.Type,System.Data.IDbCommand)">
            <summary>
            Executes a command and loads a list
            </summary>
            <param name="objectType">The type to load in the list</param>
            <param name="command">The command to execute</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.LoadObjects``1(System.Collections.IEnumerable)">
            <summary>
            Loads a list of objects from the data store
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="Ids">The primary key(s)</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.ExecuteCommandLoadList``1(System.Data.IDbCommand)">
            <summary>
            Executes a command and loads a list
            </summary>
            <typeparam name="T">The type to load in the list</typeparam>
            <param name="command">The command to execute</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.Query``1">
            <summary>
            This function will return an IQueryable appropriate for using with LINQ
            </summary>
            <typeparam name="T">The type to query</typeparam>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.GetQueryMapper">
            <summary>
            Returns the query mapper to use when doing LINQ
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.GetSelectList``1">
            <summary>
            Returns a comma separated list of the fields on an object
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.GetSelectList(System.Type)">
            <summary>
            Returns a comma separated list of the fields on an object
            </summary>
            <param name="t">The type</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.ExecuteQuery(System.Data.IDbCommand)">
            <summary>
            Executes a command
            </summary>
            <param name="command">The command to execute</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.ExecuteCommandLoadList``1(System.Type,System.Data.IDbCommand)">
            <summary>
            Executes a db command and fills in a list of objects with the result data
            </summary>
            <typeparam name="ReturnType">The type of object to return</typeparam>
            <param name="objectType">The type of object to return.</param>
            <param name="command">The command to execute</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.ProcessCommand(System.Object,System.Data.IDbCommand)">
            <summary>
            Executes a db command and fills in the object, if needed i.e. primary keys on insert etc
            </summary>
            <param name="item">The item being queried with</param>
            <param name="command">The db command</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.ProcessCommand(System.Collections.IList,System.Data.IDbCommand)">
            <summary>
            Executes a db command and fills in a list of objects when done, if needed i.e. primary keys on insert etc
            </summary>
            <param name="item">The item being queried with</param>
            <param name="command">The db command</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.ProcessCommand(System.Collections.IList,System.Data.IDbCommand,System.Boolean)">
            <summary>
            Executes a db command and fills in a list of objects when done, if needed i.e. primary keys on insert etc
            </summary>
            <param name="items">The items.</param>
            <param name="command">The db command</param>
            <param name="FailIfNoRecords">if set to <c>true</c> and there is no records in the result set, no further processing will be done</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.ProcessCommand(System.Object,System.Data.IDbCommand,System.Boolean)">
            <summary>
            Executes a db command and fills in the object, if needed i.e. primary keys on insert etc
            </summary>
            <param name="item">The item being queried with</param>
            <param name="command">The db command</param>
            <param name="FailIfNoRecords">if set to <c>true</c> and there is no records in the result set, no further processing will be done</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.DeleteObjects``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Deletes objects based on an expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="criteria"></param>
        </member>
        <member name="M:DataAccess.Core.DataStore.StartTransaction">
            <summary>
            Inits a transaction scope for the command executor
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.GetNewInstance">
            <summary>
            Returns a new instance of a data store on the same connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.GetCommand``1">
            <summary>
            Returns a helper for dealing with the db directly
            </summary>
            <typeparam name="T">The type you are dealing with on the return side</typeparam>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataStore.UpdateObjects``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Updates all items in the list, primary keys must be set
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns>
            The items that failed to update
            </returns>
        </member>
        <member name="E:DataAccess.Core.DataStore.ObjectLoaded">
            <summary>
            This event will fire anytime an object is being loaded
            </summary>
        </member>
        <member name="E:DataAccess.Core.DataStore.ObjectDeleting">
            <summary>
            This event will fire just before an object is deleted
            </summary>
        </member>
        <member name="E:DataAccess.Core.DataStore.ObjectDeleted">
            <summary>
            This event will fire just after an object is deleted
            </summary>
        </member>
        <member name="E:DataAccess.Core.DataStore.ObjectUpdating">
            <summary>
            This event will fire just before an object is updated
            </summary>
        </member>
        <member name="E:DataAccess.Core.DataStore.ObjectUpdated">
            <summary>
            This event will fire just after an object is updated
            </summary>
        </member>
        <member name="E:DataAccess.Core.DataStore.ObjectInserting">
            <summary>
            This event will fire just before an object is inserted
            </summary>
        </member>
        <member name="E:DataAccess.Core.DataStore.ObjectInserted">
            <summary>
            This event will fire just after an object is inserted
            </summary>
        </member>
        <member name="P:DataAccess.Core.DataStore.Connection">
            <summary>
            Gets or sets the DataConnection
            </summary>
            <value></value>
        </member>
        <member name="P:DataAccess.Core.DataStore.ObjectFinder">
            <summary>
            Determines how to search for data store objects based on a CLR type
            </summary>
        </member>
        <member name="P:DataAccess.Core.DataStore.ExecuteCommands">
            <summary>
            Gets or sets the command executor
            </summary>
            <value></value>
        </member>
        <member name="P:DataAccess.Core.DataStore.TypeInformationParser">
            <summary>
            Gets or sets the type information parser.
            </summary>
            <value></value>
        </member>
        <member name="P:DataAccess.Core.DataStore.SchemaValidator">
            <summary>
            Gets or sets the schema validator.
            </summary>
            <value>The schema validator.</value>
        </member>
        <member name="T:DataAccess.Core.Interfaces.IQueryRow">
            <summary>
            Represents a row in a query set
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IQueryRow.FieldAvailable(System.String)">
            <summary>
            Returns if a field is present and available for use
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IQueryRow.FieldHasMapping(System.String)">
            <summary>
            Returns if a field has been mapped to a location in the result set
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IQueryRow.FindField(System.String)">
            <summary>
            Finds a field in a result set, null if not found
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IQueryRow.GetData(System.Int32)">
            <summary>
            Returns the data for a field location
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IQueryRow.GetData(System.String)">
            <summary>
            Returns the data for a field by name
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IQueryRow.GetDataForRowField(System.Int32)">
            <summary>
            Returns the data for a field location
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IQueryRow.GetDataForRowField(System.String)">
            <summary>
            Returns the data for a field by name
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IQueryRow.ResetUsed">
            <summary>
            Makes all fields available for use
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IQueryRow.SetFieldData(System.Object[])">
            <summary>
            Sets the backing data
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IQueryRow.FieldData">
            <summary>
            The raw field data
            </summary>
        </member>
        <member name="T:DataAccess.Core.Data.Results.QueryEnumerator">
            <summary>
            Enumerates a query result set
            </summary>
        </member>
        <member name="M:DataAccess.Core.Data.Results.QueryEnumerator.#ctor(System.Data.IDataReader,DataAccess.Core.Data.QueryData)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Data.Results.QueryEnumerator"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="qd">The qd.</param>
        </member>
        <member name="M:DataAccess.Core.Data.Results.QueryEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Data.Results.QueryEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Data.Results.QueryEnumerator.Reset">
            <summary>
            Not implemented
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:DataAccess.Core.Data.Results.QueryEnumerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Data.Results.QueryEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:DataAccess.Core.Data.Results.QueryEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:DataAccess.Core.Data.Results.QueryEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="M:DataAccess.Core.Data.Results.QueryRow.FieldHasMapping(System.String)">
            <summary>
            Indicates if a field contains a mapping
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Data.Results.QueryRow.GetDataForRowField(System.Int32)">
            <summary>
            Returns the data for a given field and row
            </summary>
            <param name="field">The fields location</param>
            <param name="row">The row</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Data.Results.QueryRow.GetDataForRowField(System.String)">
            <summary>
            Returns the data for a given field and row
            </summary>
            <param name="field">The fields name</param>
            <param name="row">The row index</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Extensions.EnumeratorExtension.ToList``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            this exists in v4 or later, so I'm going to make my own so I can use it
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enr"></param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Interfaces.IQueryData">
            <summary>
            Represents a query data set
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IQueryData.GetQueryEnumerator">
            <summary>
            Returns an enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IQueryData.QueryFields">
            <summary>
            The data fields that are present
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IQueryData.QuerySuccessful">
            <summary>
            Returns if the query executed without error
            </summary>
        </member>
        <member name="T:DataAccess.Core.Interfaces.IValidateTables">
            <summary>
            Exposes some more methods to handle table modifications
            </summary>
        </member>
        <member name="T:DataAccess.Core.Interfaces.IDatastoreObjectValidator">
            <summary>
            Represents an object that validates a type against a datastore object
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDatastoreObjectValidator.ValidateObject(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Validates an objects info against the datastore
            </summary>
            <param name="ti"></param>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDatastoreObjectValidator.GetObjects(System.Boolean)">
            <summary>
            Returns a list of objects from the datastore
            </summary>
            <param name="forceReload">Will force the fetch of a fresh copy</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDatastoreObjectValidator.GetObjects">
            <summary>
            Returns a list of objects from the datastore
            </summary>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDatastoreObjectValidator.CanRemoveColumns">
            <summary>
            If false, this validator should never attempt to remove columns
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDatastoreObjectValidator.CanAddColumns">
            <summary>
            If false, this validator should never attempt to add columns
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDatastoreObjectValidator.CanUpdateColumns">
            <summary>
            If false, this validator should never attempt to update columns
            </summary>
        </member>
        <member name="E:DataAccess.Core.Interfaces.IDatastoreObjectValidator.OnObjectCreated">
            <summary>
            This event is fired when an object is added by the validator
            </summary>
        </member>
        <member name="E:DataAccess.Core.Interfaces.IDatastoreObjectValidator.OnObjectModified">
            <summary>
            This event is fired when an object is modified by the validator
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IValidateTables.AddTable(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Will add a table to the datastore and return the result
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IValidateTables.AddColumn(DataAccess.Core.Data.DataFieldInfo,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Will add a column to the datastore
            </summary>
            <param name="field"></param>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IValidateTables.RemoveColumn(DataAccess.Core.Data.DataFieldInfo,DataAccess.Core.Data.TypeInfo)">
            <summary>
            will remove a column from the datastore
            </summary>
            <param name="field"></param>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IValidateTables.ModifyColumn(DataAccess.Core.Data.DataFieldInfo,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Modifies a column on a table to match the domain object (data type and such)
            </summary>
            <param name="dfi"></param>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IValidateTables.CheckSchema(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Makes sure the schema is valid and present (if required )
            </summary>
            <param name="ti"></param>
        </member>
        <member name="T:DataAccess.Core.QueryPredicateFunction">
            <summary>
            Represents a function to be called on object for a query predicate
            </summary>
        </member>
        <member name="M:DataAccess.Core.QueryPredicateFunction.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Default constructor
            </summary>
            <param name="MethodInfo">The method info to invoke with</param>
        </member>
        <member name="P:DataAccess.Core.QueryPredicateFunction.StaticMethod">
            <summary>
            Will be true if the method is static
            </summary>
        </member>
        <member name="T:DataAccess.Core.DatabaseCommandGenerator">
            <summary>
            Generates various types of data store Commands
            </summary>
        </member>
        <member name="T:DataAccess.Core.Interfaces.ICommandGenerator">
            <summary>
            Generates various types of data store Commands
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetInsertCommand(System.Object)">
            <summary>
            Returns a command for inserting one object
            </summary>
            <param name="item">The object to insert</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetInsertCommand(System.Collections.IList)">
            <summary>
            Returns a command for inserting a list of objects
            </summary>
            <param name="items">The objects to insert</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetUpdateCommand(System.Object)">
            <summary>
            Returns a command for performing an update on an object
            </summary>
            <param name="item">The object to update</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetSelectCommand(System.Object,System.Boolean)">
            <summary>
            Generates a select for a single object
            </summary>
            <param name="item">The item to load (primary key needs to be set)</param>
            <param name="LoadAllFields">if true, the load field on type info will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetDeleteCommand(System.Object)">
            <summary>
            Generates a delete command for one object (primary key is required)
            </summary>
            <param name="item">The item to remove</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.LoadEntireTableCommand(System.Type)">
            <summary>
            Generates a command appropriate for loading an entire table from the data store
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetAddTableCommand(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Returns a command for creating a new table
            </summary>
            <param name="ti">The type to create a table for</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetRemoveColumnCommand(DataAccess.Core.Data.TypeInfo,DataAccess.Core.Data.DataFieldInfo)">
            <summary>
            Returns a command for removing a column from a table
            </summary>
            <param name="type">The type to remove the column from</param>
            <param name="dfi">The column to remove</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetAddColumnCommnad(DataAccess.Core.Data.TypeInfo,DataAccess.Core.Data.DataFieldInfo)">
            <summary>
            Returns a command for adding a column to a table
            </summary>
            <param name="type">The type to add the column to</param>
            <param name="dfi">The column to add</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetModifyColumnCommand(DataAccess.Core.Data.TypeInfo,DataAccess.Core.Data.DataFieldInfo)">
            <summary>
            Returns a command for modifying a column to the specified type
            </summary>
            <param name="type">The type to modify</param>
            <param name="dfi">The column to modify</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetModifyColumnCommand(DataAccess.Core.Data.TypeInfo,DataAccess.Core.Data.DataFieldInfo,System.String)">
            <summary>
            Returns a command for modifying a column to the specified type
            </summary>
            <param name="type">The type to modify</param>
            <param name="dfi">The column to modify</param>
            <param name="targetFieldType">The type to change the field to</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetDeleteCommand``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a delete command appropriate for an expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.ResolveTableName(System.Type)">
            <summary>
            Returns the name of the table (schema.table)
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.ResolveTableName(System.String,System.String)">
            <summary>
            Returns the name of the table (schema.table)
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.ResolveFieldName(System.String,System.Type)">
            <summary>
            Returns the name of a column
            </summary>
            <param name="PropertyName">The objects property to use</param>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetSelectList(System.Type,System.Boolean)">
            <summary>
            Returns a list of columns comma separated, appropriate for select from
            </summary>
            <param name="type">The type</param>
            <param name="LoadAllFields">Honor LoadFieldAttribute</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetSelectFields(System.Type,System.Boolean)">
            <summary>
            Returns a list of columns, appropriate for selecting
            </summary>
            <param name="type">The type</param>
            <param name="LoadAllFields">Honor LoadFieldAttribute</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.AppendInClause(System.String,System.Collections.IList,System.Text.StringBuilder,System.Data.IDbCommand,DataAccess.Core.Data.ConstraintType)">
            <summary>
            Generates an IN() clause
            </summary>
            <param name="fieldName">The parameters name</param>
            <param name="objects">The objects to select on</param>
            <param name="appendTo">The string builder to append to</param>
            <param name="cmdAppend">The command to add the parameters to</param>
            <param name="Type">The Type of constraint, defaults to AND</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.AppendWhereItem(System.String,System.Object,DataAccess.Core.Data.WhereType,System.Text.StringBuilder,System.Data.IDbCommand,DataAccess.Core.Data.ConstraintType)">
            <summary>
            Appends a restraint to a where, note it will add a comma if needed
            </summary>
            <param name="field">The field</param>
            <param name="value">The value of the field</param>
            <param name="type">The type of constraint</param>
            <param name="appendTo">The string builder to append to</param>
            <param name="cmdAppend">the command to add the parameters to</param>
            <param name="Type">The Type of constraint, defaults to AND</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.TranslateTypeToSql(DataAccess.Core.Data.DataFieldInfo)">
            <summary>
            Translates a type to SQL equivalent
            </summary>
            <param name="dfi">The data field.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetInCommand``1(System.Collections.IEnumerable)">
            <summary>
            Returns a command that will do an IN
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Ids"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICommandGenerator.GetAddSchemaCommand(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Returns a command that is appropriate for adding a schema for the object to go into
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Interfaces.ICommandGenerator.DataStore">
            <summary>
            The data store this instance is using
            </summary>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetAddTableCommand(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Returns a command for creating a new table
            </summary>
            <param name="ti">The type to create a table for</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetRemoveColumnCommand(DataAccess.Core.Data.TypeInfo,DataAccess.Core.Data.DataFieldInfo)">
            <summary>
            Returns a command for removing a column from a table
            </summary>
            <param name="type">The type to remove the column from</param>
            <param name="dfi">The column to remove</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetAddColumnCommnad(DataAccess.Core.Data.TypeInfo,DataAccess.Core.Data.DataFieldInfo)">
            <summary>
            Returns a command for adding a column to a table
            </summary>
            <param name="type">The type to add the column to</param>
            <param name="dfi">The column to add</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetAddSchemaCommand(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Returns a command appropriate for adding a schema
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetModifyColumnCommand(DataAccess.Core.Data.TypeInfo,DataAccess.Core.Data.DataFieldInfo,System.String)">
            <summary>
            Returns a command for modifying a column to the specified type
            </summary>
            <param name="type">The type to modify</param>
            <param name="dfi">The column to modify</param>
            <param name="targetFieldType">The type to change the field to</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.LoadEntireTableCommand(System.Type)">
            <summary>
            Generates a command appropriate for loading an entire table from the data store
            </summary>
            <param name="item">The type to load</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetModifyColumnCommand(DataAccess.Core.Data.TypeInfo,DataAccess.Core.Data.DataFieldInfo)">
            <summary>
            Returns a command for modifying a column to the specified type
            </summary>
            <param name="type">The type to modify</param>
            <param name="dfi">The column to modify</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.BuildFieldList(System.Collections.Generic.List{DataAccess.Core.Data.ParameterData})">
            <summary>
            Builds the field list.
            </summary>
            <param name="parms">The parms.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.AppendParameters(System.Collections.Generic.List{DataAccess.Core.Data.ParameterData},System.Data.IDbCommand)">
            <summary>
            Appends the parameters.
            </summary>
            <param name="parms">The parms.</param>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetInsertCommand(System.Object)">
            <summary>
            Returns a command for inserting one object
            </summary>
            <param name="item">The object to insert</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetInsertCommand(System.Collections.IList)">
            <summary>
            Returns a command for inserting a list of objects
            </summary>
            <param name="items">The objects to insert</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetUpdateCommand(System.Object)">
            <summary>
            Returns a command for performing an update on an object
            </summary>
            <param name="item">The object to update</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetObjectParameters(System.Int32,System.Object,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Gets the object parameters.
            </summary>
            <param name="startingIndex">The number of parameters you already have.</param>
            <param name="item">The item.</param>
            <param name="TypeInfo">The type info.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetSelectCommand(System.Object,System.Boolean)">
            <summary>
            Generates a select for a single object
            </summary>
            <param name="item">The item to load (primary key needs to be set)</param>
            <param name="LoadAllFields">if true, the load field on type info will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetDeleteCommand(System.Object)">
            <summary>
            Generates a delete command for one object (primary key is required)
            </summary>
            <param name="item">The item to remove</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetSelectFields(System.Type,System.Boolean)">
            <summary>
            Returns a list of columns, appropriate for selecting
            </summary>
            <param name="type">The type</param>
            <param name="LoadAllFields">Honor LoadFieldAttribute</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetSelectList(System.Type,System.Boolean)">
            <summary>
            Returns a list of columns comma separated, appropriate for select from
            </summary>
            <param name="type">The type</param>
            <param name="LoadAllFields">Honor LoadFieldAttribute</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.ResolveTableName(System.Type)">
            <summary>
            Returns the name of the table (schema.table)
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.ResolveTableName(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Resolves the name of the table.
            </summary>
            <param name="ti">The ti.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.ResolveTableName(DataAccess.Core.Data.TypeInfo,System.Boolean)">
            <summary>
            Resolves the name of the table.
            </summary>
            <param name="ti">The ti.</param>
            <param name="EscapeTableName">Should the table name be escaped</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.ResolveTableName(System.String,System.String)">
            <summary>
            Resolves the name of the table
            </summary>
            <param name="schema">The name of the schemaa</param>
            <param name="table">The table name</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.ResolveFieldName(System.String,System.Type)">
            <summary>
            Returns the name of a column
            </summary>
            <param name="PropertyName">The objects property to use</param>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.TranslateTypeToSql(DataAccess.Core.Data.DataFieldInfo)">
            <summary>
            Translates a type to SQL equivalent
            </summary>
            <param name="dfi">The data field.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.TranslateFkeyType(DataAccess.Core.Data.ForeignKeyType)">
            <summary>
            Translates the a foreign key constraint to a sql friendly string
            </summary>
            <param name="foreignKeyType">Type of the foreign key.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.AppendInClause(System.String,System.Collections.IList,System.Text.StringBuilder,System.Data.IDbCommand,DataAccess.Core.Data.ConstraintType)">
            <summary>
            Generates an IN() clause
            </summary>
            <param name="fieldName">The fields name</param>
            <param name="objects">The objects to select on</param>
            <param name="appendTo">The string builder to append to</param>
            <param name="cmdAppend">The command to add the parameters to</param>
            <param name="Type">The Type of constraint, defaults to AND</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.EscapeFieldName(System.String,System.Text.StringBuilder)">
             <summary>
             escapes the field name of a field, will account for an alias/table name or similar
             </summary>
             <param name="parmName"></param>
            <param name="appendTo">The sb to append the field to</param>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.AppendWhereItem(System.String,System.Object,DataAccess.Core.Data.WhereType,System.Text.StringBuilder,System.Data.IDbCommand,DataAccess.Core.Data.ConstraintType)">
            <summary>
            Appends a restraint to a where, note it will add a comma if needed
            </summary>
            <param name="field">The field</param>
            <param name="value">The value of the field</param>
            <param name="type">The type of constraint</param>
            <param name="appendTo">The string builder to append to</param>
            <param name="cmdAppend">the command to add the parameters to</param>
            <param name="Type">The Type of constraint, defaults to AND</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GenWhere(System.String,DataAccess.Core.Data.WhereType)">
            <summary>
            Escapes the field and puts the pieces of the where together
            </summary>
            <param name="parm">The parm.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetParameterName(System.Data.IDbCommand)">
            <summary>
            Returns a name for the parameter when adding to a command
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetDeleteCommand``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Generates a delete command from an expression
            </summary>
            <param name="criteria">The expression that points to the item to remove</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DatabaseCommandGenerator.GetInCommand``1(System.Collections.IEnumerable)">
            <summary>
            Returns a command that will do an IN
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Ids"></param>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.DatabaseCommandGenerator.DataStore">
            <summary>
            The data store this instance is using
            </summary>
            <value></value>
        </member>
        <member name="T:DataAccess.Core.DictionaryCacheProvider`2">
            <summary>
            Caches data in a dictionary
            </summary>
            <typeparam name="KeyType"></typeparam>
            <typeparam name="StoreType"></typeparam>
        </member>
        <member name="T:DataAccess.Core.Interfaces.ICacheProvider`2">
            <summary>
            Represents a caching mechanism
            </summary>
            <typeparam name="KeyType">The type of the object key</typeparam>
            <typeparam name="StoreType">What you are storing</typeparam>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICacheProvider`2.GetObject(`0)">
            <summary>
            Retrieves an object from the cache, returns default(StoreType) if the item was not found
            </summary>
            <param name="key">the key to lookup</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICacheProvider`2.StoreObject(`0,`1)">
            <summary>
            WIll store the object into the cache
            </summary>
            <param name="key"></param>
            <param name="toStore"></param>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICacheProvider`2.ClearCache">
            <summary>
            Removes all data from this cache
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ICacheProvider`2.ContainsKey(`0)">
            <summary>
            Determines if this cache contains the key specified
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DictionaryCacheProvider`2.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:DataAccess.Core.DictionaryCacheProvider`2.GetObject(`0)">
            <summary>
            Gets an object from the cache
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DictionaryCacheProvider`2.StoreObject(`0,`1)">
            <summary>
            Stores an object in the cache
            </summary>
            <param name="key">The key.</param>
            <param name="toStore">what to store.</param>
        </member>
        <member name="M:DataAccess.Core.DictionaryCacheProvider`2.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Events.CommandExecutingEventArgs">
            <summary>
            Fired when a command is about to execute
            </summary>
        </member>
        <member name="M:DataAccess.Core.Events.CommandExecutingEventArgs.#ctor(System.Data.IDbCommand,DataAccess.Core.Interfaces.IDataConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Events.CommandExecutingEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="P:DataAccess.Core.Events.CommandExecutingEventArgs.Command">
            <summary>
            The command
            </summary>
        </member>
        <member name="P:DataAccess.Core.Events.CommandExecutingEventArgs.Connection">
            <summary>
            The connection its going to run on
            </summary>
        </member>
        <member name="T:DataAccess.Core.Events.ObjectInsertingEventArgs">
            <summary>
            Fired after an object is inserted
            </summary>
        </member>
        <member name="M:DataAccess.Core.Events.ObjectInsertingEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Events.ObjectInsertingEventArgs"/> class.
            </summary>
            <param name="o">The o.</param>
        </member>
        <member name="P:DataAccess.Core.Events.ObjectInsertingEventArgs.Inserting">
             <summary>
            the data being inserted
             </summary>
        </member>
        <member name="T:DataAccess.Core.Events.ObjectModifiedEventArgs">
            <summary>
            Event arguments for when a table is created
            </summary>
        </member>
        <member name="M:DataAccess.Core.Events.ObjectModifiedEventArgs.#ctor(DataAccess.Core.Data.TypeInfo,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="TableInfo">The type info that triggered the change</param>
            <param name="Action">A short descritpion of what was done</param>
        </member>
        <member name="P:DataAccess.Core.Events.ObjectModifiedEventArgs.Action">
            <summary>
            The action taken on the object
            </summary>
        </member>
        <member name="P:DataAccess.Core.Events.ObjectModifiedEventArgs.Data">
            <summary>
            The data that was used to create the table
            </summary>
        </member>
        <member name="T:DataAccess.Core.Events.ObjectDeletingEventArgs">
            <summary>
            Fired when an object is about to be deleted
            </summary>
        </member>
        <member name="M:DataAccess.Core.Events.ObjectDeletingEventArgs.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="del"></param>
        </member>
        <member name="P:DataAccess.Core.Events.ObjectDeletingEventArgs.Deleted">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Events.ObjectUpdatingEventArgs">
            <summary>
            Fired when an object is being updated
            </summary>
        </member>
        <member name="M:DataAccess.Core.Events.ObjectUpdatingEventArgs.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
        </member>
        <member name="P:DataAccess.Core.Events.ObjectUpdatingEventArgs.Updating">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Events.ObjectCreatedEventArgs">
            <summary>
            Event arguments for when a table is created
            </summary>
        </member>
        <member name="M:DataAccess.Core.Events.ObjectCreatedEventArgs.#ctor(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Default constructor
            </summary>
            <param name="TableInfo"></param>
        </member>
        <member name="P:DataAccess.Core.Events.ObjectCreatedEventArgs.Data">
            <summary>
            The data that was used to create the table
            </summary>
        </member>
        <member name="T:DataAccess.Core.Events.TypeParsedEventArgs">
            <summary>
            Fired after a type is parsed
            </summary>
        </member>
        <member name="M:DataAccess.Core.Events.TypeParsedEventArgs.#ctor(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Events.TypeParsedEventArgs"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:DataAccess.Core.Events.TypeParsedEventArgs.Data">
            <summary>
            The type data
            </summary>
        </member>
        <member name="T:DataAccess.Core.Exceptions.ParameterInfo">
            <summary>
            Represents a parameter that was attached to an IDbCommand
            </summary>
        </member>
        <member name="M:DataAccess.Core.Exceptions.ParameterInfo.#ctor(System.Data.IDbDataParameter)">
            <summary>
            Default constructor
            </summary>
            <param name="v">The IDbDataParameter</param>
        </member>
        <member name="P:DataAccess.Core.Exceptions.ParameterInfo.ParmName">
            <summary>
            The name of the parameter
            </summary>
        </member>
        <member name="P:DataAccess.Core.Exceptions.ParameterInfo.ParmValue">
            <summary>
            The value of the parameter
            </summary>
        </member>
        <member name="T:DataAccess.Core.QueryException">
            <summary>
            This exception represents an error while executing a query
            </summary>
        </member>
        <member name="M:DataAccess.Core.QueryException.#ctor(System.Exception,System.Data.IDbCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.QueryException"/> class.
            </summary>
            <param name="ex">The ex.</param>
            <param name="command">The command.</param>
        </member>
        <member name="P:DataAccess.Core.QueryException.QueryText">
            <summary>
            The query text that caused the exception
            </summary>
        </member>
        <member name="P:DataAccess.Core.QueryException.Parameters">
            <summary>
            The parameters that were on the command
            </summary>
        </member>
        <member name="T:DataAccess.Core.DataStoreException">
            <summary>
            Represents a data store error
            </summary>
        </member>
        <member name="M:DataAccess.Core.DataStoreException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.DataStoreException"/> class.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="T:DataAccess.Core.Data.Column">
            <summary>
            Information about a database column
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.Column.Name">
            <summary>
            The columns name
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.Column.DataType">
            <summary>
            The columns data type
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.Column.ColumnLength">
            <summary>
            The length of the column
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.Column.ResolvedColumnType">
            <summary>
            The column type with the length specifier if required
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.Column.DefaultValue">
            <summary>
            The default value of the column, as reported by the data store
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.Column.IsPrimaryKey">
            <summary>
            True if the data store reports the column as the primary key
            </summary>
        </member>
        <member name="T:DataAccess.Core.Data.ConstraintType">
            <summary>
            The type of constraint to append to a query
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.ConstraintType.AND">
            <summary>
            Will add an "AND" if needed
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.ConstraintType.OR">
            <summary>
            Will add an "OR" if needed
            </summary>
        </member>
        <member name="T:DataAccess.Core.Data.DataFieldInfo">
            <summary>
            Information about a field on a Type
            </summary>
        </member>
        <member name="M:DataAccess.Core.Data.DataFieldInfo.#ctor">
            <summary>
            Default constructor, initializes ForeignKeyType=Cascade
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.FieldLength">
            <summary>
            The overridden size of the field
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.DataFieldString">
            <summary>
            The user has provided a string to specify the field type, only honored if DataFieldType='UserString'
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.DataFieldType">
            <summary>
            The user specified field mapping
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.DefaultValue">
            <summary>
            The parsed default value
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.FieldName">
            <summary>
            The resolved field name for the column in the data store
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.EscapedFieldName">
            <summary>
            The resolved field name for the column in the data store, surrounded by escape characters
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.PropertyName">
            <summary>
            The name of the property on the object
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.PrimaryKey">
            <summary>
            Indicates if the field was resolved as a primary key
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.SetOnInsert">
            <summary>
            Indicates the field was marked for inserting
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.LoadField">
            <summary>
            Indicates the field was marked for loading
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.PrimaryKeyType">
            <summary>
            The type that was indicated to contain a primary key for this field
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.PropertyType">
            <summary>
            The data type of this property
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.ForeignKeyType">
            <summary>
            The type of the foreign key relationship (if applicable)
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.Getter">
            <summary>
            Call to get the value of the property
            object (instance), null
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DataFieldInfo.Setter">
            <summary>
            Call to set the value of the property
            object (instance), value (what to set it to) , null
            </summary>
        </member>
        <member name="T:DataAccess.Core.Data.ForeignKeyType">
            <summary>
            The types of supported foreign key relationships
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.ForeignKeyType.NoAction">
            <summary>
            Indicates the data store should take no action
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.ForeignKeyType.Cascade">
            <summary>
            Cascading deletes and updates
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.ForeignKeyType.SetNull">
            <summary>
            Set null on delete
            </summary>
        </member>
        <member name="T:DataAccess.Core.Data.ParameterData">
            <summary>
            Holds Command Parameters
            </summary>
        </member>
        <member name="M:DataAccess.Core.Data.ParameterData.#ctor(System.Data.IDbDataParameter,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="parm">The parameter object</param>
            <param name="field">The field its for</param>
        </member>
        <member name="P:DataAccess.Core.Data.ParameterData.Parameter">
            <summary>
            The parameter object
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.ParameterData.Field">
            <summary>
            The field its for
            </summary>
        </member>
        <member name="T:DataAccess.Core.Data.QueryData">
            <summary>
            Holds the query result data
            </summary>
        </member>
        <member name="M:DataAccess.Core.Data.QueryData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DataAccess.Core.Data.QueryData.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Data.QueryData.#ctor(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Data.QueryData"/> class.
            </summary>
            <param name="r">The r.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:DataAccess.Core.Data.QueryData.MapReturnData(System.Data.IDataReader)">
            <summary>
            Maps return data to the query data
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DataAccess.Core.Data.QueryData.AddFieldMapping(System.String,System.Int32)">
            <summary>
            Add a field mapping
            </summary>
            <param name="field">The field name</param>
            <param name="location">The location the field is in the rows</param>
        </member>
        <member name="M:DataAccess.Core.Data.QueryData.GetMappings">
            <summary>
            Retrieves the data mappings
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Data.QueryData.GetFields">
            <summary>
            Gets the fields.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Data.QueryData.QuerySuccessful">
            <summary>
            Indicates if the query was successful
            </summary>
        </member>
        <member name="T:DataAccess.Core.Data.DBObject">
            <summary>
            Information about a database table
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DBObject.Schema">
            <summary>
            the schema the table is in
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DBObject.Name">
            <summary>
            The Table name
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.DBObject.Columns">
            <summary>
            The tables columns
            </summary>
        </member>
        <member name="T:DataAccess.Core.Data.TypeInfo">
            <summary>
            Resolved type information
            </summary>
        </member>
        <member name="M:DataAccess.Core.Data.TypeInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Data.TypeInfo"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.DataType">
            <summary>
            The type this is for
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.UnescapedTableName">
            <summary>
            The Table name
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.TableName">
            <summary>
            The resolved table name (escaped)
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.BypassValidation">
            <summary>
            Should this type be validated against the data store
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.Schema">
            <summary>
            The schema this table belongs to (escaped)
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.UnEscapedSchema">
            <summary>
            The schema this table belongs to
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.DataFields">
            <summary>
            The fields on this type (non ignored only)
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.AdditionalInit">
            <summary>
            Additional init functions
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.OnTableCreate">
            <summary>
            These functions will be called when a table is created
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.QueryPredicate">
            <summary>
            These functions should be called when a query is ran
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.IsView">
            <summary>
            Gets or sets a value indicating whether this instance represents a view.
            </summary>
            <value>
              <c>true</c> if this instance is view; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.IsCompilerGenerated">
            <summary>
            True if the type was generated by the compiler
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.PrimaryKeys">
            <summary>
            The primary keys for this type
            </summary>
        </member>
        <member name="P:DataAccess.Core.Data.TypeInfo.SelectString">
            <summary>
            The SQL select list, a performance enhancement
            </summary>
        </member>
        <member name="T:DataAccess.Core.Data.WhereType">
            <summary>
            The type of where to add
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.WhereType.LessThan">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.WhereType.GreaterThan">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.WhereType.Equal">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.WhereType.LessThanEqual">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.WhereType.GreaterThanEqual">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.WhereType.Contains">
            <summary>
            %($arg)%
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.WhereType.StartsWith">
            <summary>
            ($arg)%
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.WhereType.EndsWith">
            <summary>
            %($arg)
            </summary>
        </member>
        <member name="F:DataAccess.Core.Data.WhereType.NotEqual">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Events.ObjectInitializedEventArgs">
            <summary>
            Event arguments for when an object is loading
            </summary>
        </member>
        <member name="M:DataAccess.Core.Events.ObjectInitializedEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Events.ObjectInitializedEventArgs"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:DataAccess.Core.Events.ObjectInitializedEventArgs.Item">
            <summary>
            The item that was just loaded
            </summary>
        </member>
        <member name="T:DataAccess.Core.Execute.ExecuteCommands">
            <summary>
            A generic command executor
            </summary>
        </member>
        <member name="T:DataAccess.Core.Interfaces.IExecuteDatabaseCommand">
            <summary>
            Represents a class for executing data store commands
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IExecuteDatabaseCommand.ExecuteCommandQuery(System.Data.IDbCommand,DataAccess.Core.Interfaces.IDataConnection)">
            <summary>
            This method will take a command and a connection, open the connection and execute the command
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">The connection to use</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IExecuteDatabaseCommand.ExecuteCommandQueryAction(System.Data.IDbCommand,DataAccess.Core.Interfaces.IDataConnection,System.Data.IDbConnection)">
            <summary>
            This method will take a connection that is already open and run a query on it
            </summary>
            <param name="command"></param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IExecuteDatabaseCommand.ExecuteCommand(System.Data.IDbCommand,DataAccess.Core.Interfaces.IDataConnection)">
            <summary>
            Executes a command on the data store
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">The connection to use</param>
        </member>
        <member name="E:DataAccess.Core.Interfaces.IExecuteDatabaseCommand.CommandExecuting">
            <summary>
            This event will fire just before a command is executed
            </summary>
        </member>
        <member name="E:DataAccess.Core.Interfaces.IExecuteDatabaseCommand.CommandExecuted">
            <summary>
            This event will fire just after a command is executed
            </summary>
        </member>
        <member name="M:DataAccess.Core.Execute.ExecuteCommands.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Execute.ExecuteCommands"/> class.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Execute.ExecuteCommands.ExecuteCommandQuery(System.Data.IDbCommand,DataAccess.Core.Interfaces.IDataConnection)">
            <summary>
            Executes a command and returns the result
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">The connection to use</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Execute.ExecuteCommands.FireExecutingEvent(System.Data.IDbCommand,DataAccess.Core.Interfaces.IDataConnection,System.Data.IDbConnection)">
            <summary>
            Fires an  event.
            </summary>
            <param name="command">The command.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:DataAccess.Core.Execute.ExecuteCommands.ExecuteCommand(System.Data.IDbCommand,DataAccess.Core.Interfaces.IDataConnection)">
            <summary>
            Executes a command on the data store
            </summary>
            <param name="command">The command to execute</param>
            <param name="connection">The connection to use</param>
        </member>
        <member name="E:DataAccess.Core.Execute.ExecuteCommands.CommandExecuting">
            <summary>
            This event will fire just before a command is executed
            </summary>
        </member>
        <member name="T:DataAccess.Core.Execute.TransactionCommandExecutor">
            <summary>
            Executes command within a transaction
            </summary>
        </member>
        <member name="M:DataAccess.Core.Execute.TransactionCommandExecutor.#ctor(DataAccess.Core.Execute.TransactionInfo,DataAccess.Core.Interfaces.IExecuteDatabaseCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Execute.TransactionCommandExecutor"/> class.
            </summary>
            <param name="info">The transacation info.</param>
            <param name="storeExecutor">The executor used by the data store</param>
        </member>
        <member name="T:DataAccess.Core.Execute.TransactionInfo">
            <summary>
            Information about a transaction
            </summary>
        </member>
        <member name="M:DataAccess.Core.Execute.TransactionInfo.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Execute.TransactionInfo.Connection">
            <summary>
            Gets or sets the connection.
            </summary>        
        </member>
        <member name="P:DataAccess.Core.Execute.TransactionInfo.Transaction">
            <summary>
            Gets or sets the transaction.
            </summary>
        </member>
        <member name="T:System.Linq.IQueryableExtensions">
            <summary>
            Some additional query operators
            </summary>
        </member>
        <member name="M:System.Linq.IQueryableExtensions.GetPage``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            A custom extension to help with paging data
            </summary>
            <typeparam name="T">The type of data you are querying</typeparam>
            <param name="data">The target list to page</param>
            <param name="page">The page you want</param>
            <param name="numPerPage">The number of items per page you want></param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Extensions.PageData`1">
            <summary>
            Information for paging data
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DataAccess.Core.Extensions.PageData`1.NumPages">
             <summary>
            The number of pages
             </summary>
        </member>
        <member name="P:DataAccess.Core.Extensions.PageData`1.Data">
            <summary>
            The current data set
            </summary>
        </member>
        <member name="T:DataAccess.Core.Helpers">
            <summary>
            Some helper functions used throughout the library
            </summary>
        </member>
        <member name="M:DataAccess.Core.Helpers.LoadObjectInfo(DataAccess.Core.Interfaces.IDataStore,DataAccess.Core.Interfaces.IQueryRow,System.Collections.Generic.List{DataAccess.Core.Interfaces.IQueryRow})">
            <summary>
            Loads the object info.
            </summary>
            <param name="columns">The columns.</param>
            <param name="table">The table.</param>
            <param name="dstore">The datastore to look in</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Helpers.AddColumn(DataAccess.Core.Interfaces.IDataStore,DataAccess.Core.Interfaces.IQueryRow,DataAccess.Core.Data.DBObject)">
            <summary>
            Adds the column.
            </summary>
            <param name="column">The column</param>
            <param name="t">The data object</param>
            <param name="dstore">The datastore to look in</param>
        </member>
        <member name="T:DataAccess.Core.Interfaces.IFindDataObjects">
            <summary>
            Defines how to find a data object froma datastore based on a type
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IFindDataObjects.GetObject(System.Collections.Generic.IEnumerable{DataAccess.Core.Data.DBObject},DataAccess.Core.Data.TypeInfo)">
            <summary>
            Returns a dbobject for an object
            </summary>
            <param name="objects">the objects to search</param>
            <param name="typeInfo">The type to lookup for</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Interfaces.IDataConnection">
            <summary>
            A connection to a data store
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataConnection.GetConnection">
            <summary>
            Gets the connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataConnection.GetCommand">
            <summary>
            Gets a data command for this connection type
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataConnection.GetParameter(System.String,System.Object)">
            <summary>
            Gets a data parameter for this connection type
            </summary>
            <param name="name">The parameters name</param>
            <param name="value">The value of the parameter</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataConnection.GetSchemaTables(DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Returns a list of tables from the data store
            </summary>
            <param name="dstore"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataConnection.GetSchemaViews(DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Returns a list of views from the datastore
            </summary>
            <param name="dstore"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataConnection.GetQueryProvider(DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Returns a linq query provider
            </summary>
            <param name="dStore">The datastore to use for querying</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataConnection.GetDeleteFormatter(DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Returns a delete formatter
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IDataConnection.DoBulkInsert(System.Collections.IList,DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Performs a bulk insert of data to the datastore (if supported)
            </summary>
            <param name="items"></param>
            <param name="dstore"></param>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDataConnection.CLRConverter">
            <summary>
            Converts data on the way out that is Datastore -> CLR
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDataConnection.DatastoreConverter">
            <summary>
            Coverts data on the way in that is, CLR -> Datastore
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDataConnection.CommandGenerator">
            <summary>
            The command generator for this data store
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDataConnection.LeftEscapeCharacter">
            <summary>
            the data stores escape character (left side)
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDataConnection.RightEscapeCharacter">
            <summary>
            the data stores escape character (right side)
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.IDataConnection.DefaultSchema">
            <summary>
            The default schema for this data store
            </summary>
        </member>
        <member name="T:DataAccess.Core.Interfaces.ISchemaValidator">
            <summary>
            Represents an object that will perform schema validation/modification on a data store
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ISchemaValidator.ValidateType(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Performs schema validation/modification to match the type
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:DataAccess.Core.Interfaces.ISchemaValidator.CanRemoveColumns">
            <summary>
            If false, the schema validator will never remove columns (defaults to false)
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.ISchemaValidator.CanAddColumns">
            <summary>
            If false, the schema validator will never add columns (defaults to true)
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.ISchemaValidator.CanUpdateColumns">
            <summary>
            If false, the schema validator will never update columns (defaults to true)
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.ISchemaValidator.TableValidator">
            <summary>
            The component to use when validating tables
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.ISchemaValidator.ViewValidator">
            <summary>
            The component to use when validating views
            </summary>
        </member>
        <member name="T:DataAccess.Core.Interfaces.IConvertToCLR">
            <summary>
            Represents a class responsible for converting types from the database into CLR types
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IConvertToCLR.ConvertToType(System.Object,System.Type)">
            <summary>
            Converts a data type
            </summary>
            <param name="p">The object to convert</param>
            <param name="type">The type to convert it to</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.IConvertToCLR.ConvertToType``1(System.Object)">
            <summary>
            Converts a data type
            </summary>
            <typeparam name="T">The type to convert it to</typeparam>
            <param name="p">The object to convert</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Interfaces.ITypeInformationParser">
            <summary>
            Represents a class responsible for parsing information from a type
            </summary>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ITypeInformationParser.GetTypeFields(System.Type)">
            <summary>
            Gets the types fields.
            </summary>
            <param name="dataType">The type to parse</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ITypeInformationParser.GetPrimaryKeys(System.Type)">
            <summary>
            Gets the primary keys for a type
            </summary>
            <param name="dataType">The type to parse</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ITypeInformationParser.GetTypeInfo(System.Type)">
            <summary>
            Gets a lot of information from a type
            </summary>
            <param name="type">The type to parse</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Interfaces.ITypeInformationParser.GetTypeInfo(System.Type,System.Boolean)">
            <summary>
            Gets a lot of information from a type
            </summary>
            <param name="type">The type to parse</param>
            <param name="Validate">if False, the the object will not be passed to the validator</param>
            <returns></returns>
        </member>
        <member name="E:DataAccess.Core.Interfaces.ITypeInformationParser.OnTypeParsed">
            <summary>
            This event will fire just after a type has been parsed
            </summary>
        </member>
        <member name="P:DataAccess.Core.Interfaces.ITypeInformationParser.Cache">
            <summary>
            The data cache provider for the type parser
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.ColumnAssignment">
            <summary>
            Linq stuff
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.ColumnAssignment.#ctor(DataAccess.Core.Linq.Common.Expressions.ColumnExpression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.ColumnAssignment"/> class.
            </summary>
            <param name="column">The column.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.ColumnAssignment.Column">
            <summary>
            Gets the column.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.ColumnAssignment.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.CommandGatherer">
            <summary>
            linq stuff
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor">
            <summary>
            An extended expression visitor including custom DbExpression nodes
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.ExpressionVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.ExpressionVisitor"/> class.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified exp.
            </summary>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitUnknown(System.Linq.Expressions.Expression)">
            <summary>
            Visits the unknown.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits the binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits the element initializer.
            </summary>
            <param name="initializer">The initializer.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the unary.
            </summary>
            <param name="u">The u.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateUnary(System.Linq.Expressions.UnaryExpression,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
            <summary>
            Updates the unary.
            </summary>
            <param name="u">The u.</param>
            <param name="operand">The operand.</param>
            <param name="resultType">Type of the result.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the binary.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateBinary(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
            <summary>
            Updates the binary.
            </summary>
            <param name="b">The b.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="conversion">The conversion.</param>
            <param name="isLiftedToNull">if set to <c>true</c> [is lifted to null].</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits the type is.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateTypeIs(System.Linq.Expressions.TypeBinaryExpression,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Updates the type is.
            </summary>
            <param name="b">The b.</param>
            <param name="expression">The expression.</param>
            <param name="typeOperand">The type operand.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the conditional.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateConditional(System.Linq.Expressions.ConditionalExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Updates the conditional.
            </summary>
            <param name="c">The c.</param>
            <param name="test">The test.</param>
            <param name="ifTrue">If true.</param>
            <param name="ifFalse">If false.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the parameter.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member access.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateMemberAccess(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            Updates the member access.
            </summary>
            <param name="m">The m.</param>
            <param name="expression">The expression.</param>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the method call.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateMethodCall(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Updates the method call.
            </summary>
            <param name="m">The m.</param>
            <param name="obj">The obj.</param>
            <param name="method">The method.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits the expression list.
            </summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitMemberAndExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Reflection.MemberInfo},System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits the member and expression list.
            </summary>
            <param name="members">The members.</param>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitMemberAndExpression(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
            <summary>
            Visits the member and expression.
            </summary>
            <param name="member">The member.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits the member assignment.
            </summary>
            <param name="assignment">The assignment.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateMemberAssignment(System.Linq.Expressions.MemberAssignment,System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
            <summary>
            Updates the member assignment.
            </summary>
            <param name="assignment">The assignment.</param>
            <param name="member">The member.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits the member member binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding,System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <summary>
            Updates the member member binding.
            </summary>
            <param name="binding">The binding.</param>
            <param name="member">The member.</param>
            <param name="bindings">The bindings.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits the member list binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateMemberListBinding(System.Linq.Expressions.MemberListBinding,System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <summary>
            Updates the member list binding.
            </summary>
            <param name="binding">The binding.</param>
            <param name="member">The member.</param>
            <param name="initializers">The initializers.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visits the binding list.
            </summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visits the element initializer list.
            </summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits the lambda.
            </summary>
            <param name="lambda">The lambda.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateLambda(System.Linq.Expressions.LambdaExpression,System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Updates the lambda.
            </summary>
            <param name="lambda">The lambda.</param>
            <param name="delegateType">Type of the delegate.</param>
            <param name="body">The body.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the new.
            </summary>
            <param name="nex">The nex.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateNew(System.Linq.Expressions.NewExpression,System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Updates the new.
            </summary>
            <param name="nex">The nex.</param>
            <param name="constructor">The constructor.</param>
            <param name="args">The args.</param>
            <param name="members">The members.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the member init.
            </summary>
            <param name="init">The init.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateMemberInit(System.Linq.Expressions.MemberInitExpression,System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <summary>
            Updates the member init.
            </summary>
            <param name="init">The init.</param>
            <param name="nex">The nex.</param>
            <param name="bindings">The bindings.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits the list init.
            </summary>
            <param name="init">The init.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateListInit(System.Linq.Expressions.ListInitExpression,System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <summary>
            Updates the list init.
            </summary>
            <param name="init">The init.</param>
            <param name="nex">The nex.</param>
            <param name="initializers">The initializers.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the new array.
            </summary>
            <param name="na">The na.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateNewArray(System.Linq.Expressions.NewArrayExpression,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Updates the new array.
            </summary>
            <param name="na">The na.</param>
            <param name="arrayType">Type of the array.</param>
            <param name="expressions">The expressions.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits the invocation.
            </summary>
            <param name="iv">The iv.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionVisitor.UpdateInvocation(System.Linq.Expressions.InvocationExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Updates the invocation.
            </summary>
            <param name="iv">The iv.</param>
            <param name="expression">The expression.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified exp.
            </summary>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitEntity(DataAccess.Core.Linq.Common.Expressions.EntityExpression)">
            <summary>
            Visits the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateEntity(DataAccess.Core.Linq.Common.Expressions.EntityExpression,System.Linq.Expressions.Expression)">
            <summary>
            Updates the entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitTable(DataAccess.Core.Linq.Common.Expressions.TableExpression)">
            <summary>
            Visits the table.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitColumn(DataAccess.Core.Linq.Common.Expressions.ColumnExpression)">
            <summary>
            Visits the column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Visits the select.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.Expressions.OrderExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.ColumnDeclaration})">
            <summary>
            Updates the select.
            </summary>
            <param name="select">The select.</param>
            <param name="from">From.</param>
            <param name="where">The where.</param>
            <param name="orderBy">The order by.</param>
            <param name="groupBy">The group by.</param>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <param name="isDistinct">if set to <c>true</c> [is distinct].</param>
            <param name="isReverse">if set to <c>true</c> [is reverse].</param>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitJoin(DataAccess.Core.Linq.Common.Expressions.JoinExpression)">
            <summary>
            Visits the join.
            </summary>
            <param name="join">The join.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateJoin(DataAccess.Core.Linq.Common.Expressions.JoinExpression,DataAccess.Core.Linq.Enums.JoinType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Updates the join.
            </summary>
            <param name="join">The join.</param>
            <param name="joinType">Type of the join.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitOuterJoined(DataAccess.Core.Linq.Common.Expressions.OuterJoinedExpression)">
            <summary>
            Visits the outer joined.
            </summary>
            <param name="outer">The outer.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateOuterJoined(DataAccess.Core.Linq.Common.Expressions.OuterJoinedExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Updates the outer joined.
            </summary>
            <param name="outer">The outer.</param>
            <param name="test">The test.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitAggregate(DataAccess.Core.Linq.Common.Expressions.AggregateExpression)">
            <summary>
            Visits the aggregate.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateAggregate(DataAccess.Core.Linq.Common.Expressions.AggregateExpression,System.Type,System.String,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Updates the aggregate.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <param name="type">The type.</param>
            <param name="aggType">Type of the agg.</param>
            <param name="arg">The arg.</param>
            <param name="isDistinct">if set to <c>true</c> [is distinct].</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitIsNull(DataAccess.Core.Linq.Common.Expressions.IsNullExpression)">
            <summary>
            Visits the is null.
            </summary>
            <param name="isnull">The isnull.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateIsNull(DataAccess.Core.Linq.Common.Expressions.IsNullExpression,System.Linq.Expressions.Expression)">
            <summary>
            Updates the is null.
            </summary>
            <param name="isnull">The isnull.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitBetween(DataAccess.Core.Linq.Common.Expressions.BetweenExpression)">
            <summary>
            Visits the between.
            </summary>
            <param name="between">The between.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateBetween(DataAccess.Core.Linq.Common.Expressions.BetweenExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Updates the between.
            </summary>
            <param name="between">The between.</param>
            <param name="expression">The expression.</param>
            <param name="lower">The lower.</param>
            <param name="upper">The upper.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitRowNumber(DataAccess.Core.Linq.Common.Expressions.RowNumberExpression)">
            <summary>
            Visits the row number.
            </summary>
            <param name="rowNumber">The row number.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateRowNumber(DataAccess.Core.Linq.Common.Expressions.RowNumberExpression,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.Expressions.OrderExpression})">
            <summary>
            Updates the row number.
            </summary>
            <param name="rowNumber">The row number.</param>
            <param name="orderBy">The order by.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitNamedValue(DataAccess.Core.Linq.Common.Expressions.NamedValueExpression)">
            <summary>
            Visits the named value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitSubquery(DataAccess.Core.Linq.Common.Expressions.SubqueryExpression)">
            <summary>
            Visits the subquery.
            </summary>
            <param name="subquery">The subquery.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitScalar(DataAccess.Core.Linq.Common.Expressions.ScalarExpression)">
            <summary>
            Visits the scalar.
            </summary>
            <param name="scalar">The scalar.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateScalar(DataAccess.Core.Linq.Common.Expressions.ScalarExpression,DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Updates the scalar.
            </summary>
            <param name="scalar">The scalar.</param>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitExists(DataAccess.Core.Linq.Common.Expressions.ExistsExpression)">
            <summary>
            Visits the exists.
            </summary>
            <param name="exists">The exists.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateExists(DataAccess.Core.Linq.Common.Expressions.ExistsExpression,DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Updates the exists.
            </summary>
            <param name="exists">The exists.</param>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitIn(DataAccess.Core.Linq.Common.Expressions.InExpression)">
            <summary>
            Visits the in.
            </summary>
            <param name="in">The @in.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateIn(DataAccess.Core.Linq.Common.Expressions.InExpression,System.Linq.Expressions.Expression,DataAccess.Core.Linq.Common.Expressions.SelectExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Updates the in.
            </summary>
            <param name="in">The @in.</param>
            <param name="expression">The expression.</param>
            <param name="select">The select.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitAggregateSubquery(DataAccess.Core.Linq.Common.Expressions.AggregateSubqueryExpression)">
            <summary>
            Visits the aggregate subquery.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateAggregateSubquery(DataAccess.Core.Linq.Common.Expressions.AggregateSubqueryExpression,DataAccess.Core.Linq.Common.Expressions.ScalarExpression)">
            <summary>
            Updates the aggregate subquery.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <param name="subquery">The subquery.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitSource(System.Linq.Expressions.Expression)">
            <summary>
            Visits the source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitProjection(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression)">
            <summary>
            Visits the projection.
            </summary>
            <param name="proj">The proj.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateProjection(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression,DataAccess.Core.Linq.Common.Expressions.SelectExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Updates the projection.
            </summary>
            <param name="proj">The proj.</param>
            <param name="select">The select.</param>
            <param name="projector">The projector.</param>
            <param name="aggregator">The aggregator.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitClientJoin(DataAccess.Core.Linq.Common.Expressions.ClientJoinExpression)">
            <summary>
            Visits the client join.
            </summary>
            <param name="join">The join.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateClientJoin(DataAccess.Core.Linq.Common.Expressions.ClientJoinExpression,DataAccess.Core.Linq.Common.Expressions.ProjectionExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Updates the client join.
            </summary>
            <param name="join">The join.</param>
            <param name="projection">The projection.</param>
            <param name="outerKey">The outer key.</param>
            <param name="innerKey">The inner key.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitCommand(DataAccess.Core.Linq.Common.Expressions.CommandExpression)">
            <summary>
            Visits the command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitBatch(DataAccess.Core.Linq.Common.Expressions.BatchExpression)">
            <summary>
            Visits the batch.
            </summary>
            <param name="batch">The batch.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateBatch(DataAccess.Core.Linq.Common.Expressions.BatchExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Updates the batch.
            </summary>
            <param name="batch">The batch.</param>
            <param name="input">The input.</param>
            <param name="operation">The operation.</param>
            <param name="batchSize">Size of the batch.</param>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitIf(DataAccess.Core.Linq.Common.Expressions.IFCommand)">
            <summary>
            Visits if.
            </summary>
            <param name="ifx">The ifx.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateIf(DataAccess.Core.Linq.Common.Expressions.IFCommand,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Updates if.
            </summary>
            <param name="ifx">The ifx.</param>
            <param name="check">The check.</param>
            <param name="ifTrue">If true.</param>
            <param name="ifFalse">If false.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitBlock(DataAccess.Core.Linq.Common.Expressions.BlockCommand)">
            <summary>
            Visits the block.
            </summary>
            <param name="block">The block.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateBlock(DataAccess.Core.Linq.Common.Expressions.BlockCommand,System.Collections.Generic.IList{System.Linq.Expressions.Expression})">
            <summary>
            Updates the block.
            </summary>
            <param name="block">The block.</param>
            <param name="commands">The commands.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitDeclaration(DataAccess.Core.Linq.Common.Expressions.DeclarationCommand)">
            <summary>
            Visits the declaration.
            </summary>
            <param name="decl">The decl.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateDeclaration(DataAccess.Core.Linq.Common.Expressions.DeclarationCommand,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.VariableDeclaration},DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Updates the declaration.
            </summary>
            <param name="decl">The decl.</param>
            <param name="variables">The variables.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitVariable(DataAccess.Core.Linq.Common.Expressions.VariableExpression)">
            <summary>
            Visits the variable.
            </summary>
            <param name="vex">The vex.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitFunction(DataAccess.Core.Linq.Common.Expressions.FunctionExpression)">
            <summary>
            Visits the function.
            </summary>
            <param name="func">The func.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.UpdateFunction(DataAccess.Core.Linq.Common.Expressions.FunctionExpression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Updates the function.
            </summary>
            <param name="func">The func.</param>
            <param name="name">The name.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitColumnAssignment(DataAccess.Core.Linq.ColumnAssignment)">
            <summary>
            Visits the column assignment.
            </summary>
            <param name="ca">The ca.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitColumnAssignments(System.Collections.ObjectModel.ReadOnlyCollection{DataAccess.Core.Linq.ColumnAssignment})">
            <summary>
            Visits the column assignments.
            </summary>
            <param name="assignments">The assignments.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitColumnDeclarations(System.Collections.ObjectModel.ReadOnlyCollection{DataAccess.Core.Linq.Common.ColumnDeclaration})">
            <summary>
            Visits the column declarations.
            </summary>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitVariableDeclarations(System.Collections.ObjectModel.ReadOnlyCollection{DataAccess.Core.Linq.Common.VariableDeclaration})">
            <summary>
            Visits the variable declarations.
            </summary>
            <param name="decls">The decls.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionVisitor.VisitOrderBy(System.Collections.ObjectModel.ReadOnlyCollection{DataAccess.Core.Linq.Common.Expressions.OrderExpression})">
            <summary>
            Visits the order by.
            </summary>
            <param name="expressions">The expressions.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.ColumnDeclaration">
            <summary>
            A declaration of a column in a SQL SELECT expression
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ColumnDeclaration.#ctor(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.ColumnDeclaration"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="expression">The expression.</param>
            <param name="queryType">Type of the query.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.ColumnDeclaration.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.ColumnDeclaration.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.ColumnGatherer">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.ColumnGatherer.columns">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ColumnGatherer.Gather(System.Linq.Expressions.Expression)">
            <summary>
            Gathers the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ColumnGatherer.VisitColumn(DataAccess.Core.Linq.Common.Expressions.ColumnExpression)">
            <summary>
            Visits the column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.CompoundKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.CompoundKey.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.CompoundKey"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.CompoundKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.CompoundKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.CompoundKey.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.CompoundKey.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.DeferredList`1">
            <summary>
            A list implementation that is loaded the first time the contents are examined
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DataAccess.Core.Linq.Interfaces.IDeferredList`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DataAccess.Core.Linq.Interfaces.IDeferredList">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Interfaces.IDeferLoadable">
            <summary>
            Common interface for controlling defer-loadable types
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Interfaces.IDeferLoadable.Load">
            <summary>
            Loads this instance.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Interfaces.IDeferLoadable.IsLoaded">
            <summary>
            Gets a value indicating whether this instance is loaded.
            </summary>
            <value>
              <c>true</c> if this instance is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.DeferredValue`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.DeferredValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.DeferredValue`1"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.DeferredValue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.DeferredValue`1"/> struct.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.DeferredValue`1.Load">
            <summary>
            Loads this instance.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.DeferredValue`1.Check">
            <summary>
            Checks this instance.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.DeferredValue`1.IsLoaded">
            <summary>
            Gets a value indicating whether this instance is loaded.
            </summary>
            <value>
              <c>true</c> if this instance is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.DeferredValue`1.IsAssigned">
            <summary>
            Gets a value indicating whether this instance is assigned.
            </summary>
            <value>
            	<c>true</c> if this instance is assigned; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.DeferredValue`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.EmptyReadOnlyCollection`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.EmptyReadOnlyCollection`1.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.EntityFinder">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.EntityFinder.Find(System.Linq.Expressions.Expression)">
            <summary>
            Finds the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.EntityFinder.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified exp.
            </summary>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.EntityFinder.VisitEntity(DataAccess.Core.Linq.Common.Expressions.EntityExpression)">
            <summary>
            Visits the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.EntityFinder.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the new.
            </summary>
            <param name="nex">The nex.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.EntityFinder.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the member init.
            </summary>
            <param name="init">The init.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.EnumerateOnce`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.EnumerateOnce`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.EnumerateOnce`1"/> class.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.EnumerateOnce`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.EnumerateOnce`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Mapping.BasicMapper">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Mapping.QueryMapper">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.QueryMapper.GetQueryExpression(DataAccess.Core.Linq.Common.Mapping.MappingEntity)">
            <summary>
            Get a query expression that selects all entities from a table
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.QueryMapper.GetEntityExpression(System.Linq.Expressions.Expression,DataAccess.Core.Linq.Common.Mapping.MappingEntity)">
            <summary>
            Gets an expression that constructs an entity instance relative to a root.
            The root is most often a TableExpression, but may be any other expression such as
            a ConstantExpression.
            </summary>
            <param name="root"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.QueryMapper.GetMemberExpression(System.Linq.Expressions.Expression,DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Reflection.MemberInfo)">
            <summary>
            Get an expression for a mapped property relative to a root expression. 
            The root is either a TableExpression or an expression defining an entity instance.
            </summary>
            <param name="root"></param>
            <param name="entity"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.QueryMapper.IncludeMembers(DataAccess.Core.Linq.Common.Expressions.EntityExpression,System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            Recreate the type projection with the additional members included
            </summary>
            <param name="entity"></param>
            <param name="fnIsIncluded"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.QueryMapper.HasIncludedMembers(DataAccess.Core.Linq.Common.Expressions.EntityExpression)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.QueryMapper.ApplyMapping(System.Linq.Expressions.Expression)">
            <summary>
            Apply mapping to a sub query expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.QueryMapper.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Apply mapping translations to this expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.QueryMapper.Mapping">
            <summary>
            Gets the mapping.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.QueryMapper.Translator">
            <summary>
            Gets the translator.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.BasicMapper.GetQueryExpression(DataAccess.Core.Linq.Common.Mapping.MappingEntity)">
            <summary>
            Get a query expression that selects all entities from a table
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.BasicMapper.GetEntityExpression(System.Linq.Expressions.Expression,DataAccess.Core.Linq.Common.Mapping.MappingEntity)">
            <summary>
            Gets an expression that constructs an entity instance relative to a root.
            The root is most often a TableExpression, but may be any other expression such as
            a ConstantExpression.
            </summary>
            <param name="root"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.BasicMapper.MapAssignments(System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.Mapping.EntityAssignment},System.Type)">
            <summary>
            Maps the assignments.
            </summary>
            <param name="assignments">The assignments.</param>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.BasicMapper.BindConstructor(System.Reflection.ConstructorInfo,System.Collections.Generic.IList{DataAccess.Core.Linq.Common.Mapping.EntityAssignment})">
            <summary>
            Binds the constructor.
            </summary>
            <param name="cons">The cons.</param>
            <param name="assignments">The assignments.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.BasicMapper.HasIncludedMembers(DataAccess.Core.Linq.Common.Expressions.EntityExpression)">
            <summary>
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.BasicMapper.IncludeMembers(DataAccess.Core.Linq.Common.Expressions.EntityExpression,System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            Recreate the type projection with the additional members included
            </summary>
            <param name="entity"></param>
            <param name="fnIsIncluded"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.BasicMapper.GetAssignments(System.Linq.Expressions.Expression)">
            <summary>
            Gets the assignments.
            </summary>
            <param name="newOrMemberInit">The new or member init.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.BasicMapper.GetMemberExpression(System.Linq.Expressions.Expression,DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Reflection.MemberInfo)">
            <summary>
            Get an expression for a mapped property relative to a root expression.
            The root is either a TableExpression or an expression defining an entity instance.
            </summary>
            <param name="root"></param>
            <param name="entity"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.BasicMapper.GetColumnAssignments(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Func{DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            Gets the column assignments.
            </summary>
            <param name="table">The table.</param>
            <param name="instance">The instance.</param>
            <param name="entity">The entity.</param>
            <param name="fnIncludeColumn">The fn include column.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Mapping.BasicMappingEntity">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Mapping.MappingEntity">
            <summary>
            
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.MappingEntity.TableId">
            <summary>
            Gets the table id.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.MappingEntity.ElementType">
            <summary>
            Gets the type of the element.
            </summary>
            <value>
            The type of the element.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.MappingEntity.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.BasicMappingEntity.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Mapping.BasicMappingEntity"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="entityID">The entity ID.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.BasicMappingEntity.TableId">
            <summary>
            Gets the table id.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.BasicMappingEntity.ElementType">
            <summary>
            Gets the type of the element.
            </summary>
            <value>
            The type of the element.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.BasicMappingEntity.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Mapping.ConstructorBindResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.ConstructorBindResult.#ctor(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.Mapping.EntityAssignment})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Mapping.ConstructorBindResult"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="remaining">The remaining.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.ConstructorBindResult.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.ConstructorBindResult.Remaining">
            <summary>
            Gets the remaining.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Mapping.EntityAssignment">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.EntityAssignment.#ctor(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Mapping.EntityAssignment"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.EntityAssignment.Member">
            <summary>
            Gets the member.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.EntityAssignment.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Mapping.EntityInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Mapping.EntityInfo.#ctor(System.Object,DataAccess.Core.Linq.Common.Mapping.MappingEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Mapping.EntityInfo"/> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="mapping">The mapping.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.EntityInfo.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Mapping.EntityInfo.Mapping">
            <summary>
            Gets the mapping.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Nominator.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Nominator.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.OuterParameterizer">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.OuterParameterizer.VisitProjection(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression)">
            <summary>
            Visits the projection.
            </summary>
            <param name="proj">The proj.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.OuterParameterizer.VisitColumn(DataAccess.Core.Linq.Common.Expressions.ColumnExpression)">
            <summary>
            Visits the column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.ProjectionFinder">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.ProjectionFinder.found">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ProjectionFinder.FindProjection(System.Linq.Expressions.Expression)">
            <summary>
            Finds the projection.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ProjectionFinder.VisitProjection(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression)">
            <summary>
            Visits the projection.
            </summary>
            <param name="proj">The proj.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.QueryParameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryParameter.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.QueryParameter"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="queryType">Type of the query.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.QueryParameter.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.QueryParameter.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.QueryPolice">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryPolice.#ctor(DataAccess.Core.Linq.Common.QueryPolicy,DataAccess.Core.Linq.Common.QueryTranslator)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.QueryPolice"/> class.
            </summary>
            <param name="policy">The policy.</param>
            <param name="translator">The translator.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryPolice.ApplyPolicy(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            Applies the policy.
            </summary>
            <param name="expression">The expression.</param>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryPolice.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Provides policy specific query translations.  This is where choices about inclusion of related objects and how
            heirarchies are materialized affect the definition of the queries.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryPolice.BuildExecutionPlan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Converts a query into an execution plan.  The plan is an function that executes the query and builds the
            resulting objects.
            </summary>
            <param name="query">The query.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.QueryPolice.Policy">
            <summary>
            Gets the policy.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.QueryPolice.Translator">
            <summary>
            Gets the translator.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Scope">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.SubtreeEvaluator.candidates">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.SubtreeEvaluator.onEval">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.SubtreeEvaluator.#ctor(System.Collections.Generic.HashSet{System.Linq.Expressions.Expression},System.Func{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.Expression})">
            <summary>
            Prevents a default instance of the <see cref="T:DataAccess.Core.Linq.Common.SubtreeEvaluator"/> class from being created.
            </summary>
            <param name="candidates">The candidates.</param>
            <param name="onEval">The on eval.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.SubtreeEvaluator.Eval(System.Collections.Generic.HashSet{System.Linq.Expressions.Expression},System.Func{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
            <summary>
            Evals the specified candidates.
            </summary>
            <param name="candidates">The candidates.</param>
            <param name="onEval">The on eval.</param>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.SubtreeEvaluator.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified exp.
            </summary>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.SubtreeEvaluator.PostEval(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Posts the eval.
            </summary>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.SubtreeEvaluator.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates the specified e.
            </summary>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.AggregateGatherer">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.AggregateGatherer.VisitAggregateSubquery(DataAccess.Core.Linq.Common.Expressions.AggregateSubqueryExpression)">
            <summary>
            Visits the aggregate subquery.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.GroupByInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.GroupByInfo.#ctor(DataAccess.Core.Linq.Common.TableAlias,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Translation.GroupByInfo"/> class.
            </summary>
            <param name="alias">The alias.</param>
            <param name="element">The element.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Translation.GroupByInfo.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Translation.GroupByInfo.Element">
            <summary>
            Gets the element.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.HashedExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.HashedExpression.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Translation.HashedExpression"/> struct.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.HashedExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.HashedExpression.Equals(DataAccess.Core.Linq.Common.Translation.HashedExpression)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.HashedExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.Hasher">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.Hasher.ComputeHash(System.Linq.Expressions.Expression)">
            <summary>
            Computes the hash.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.Hasher.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.NamedValueComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.NamedValueComparer.Equals(DataAccess.Core.Linq.Common.Expressions.NamedValueExpression,DataAccess.Core.Linq.Common.Expressions.NamedValueExpression)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.NamedValueComparer.GetHashCode(DataAccess.Core.Linq.Common.Expressions.NamedValueExpression)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.Nominator">
            <summary>
            Nominator is a class that walks an expression tree bottom up, determining the set of 
            candidate expressions that are possible columns of a select expression
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.Nominator.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.Nominator.VisitProjection(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression)">
            <summary>
            Visits the projection.
            </summary>
            <param name="proj">The proj.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.ProjectedColumns">
            <summary>
            Result from calling ColumnProjector.ProjectColumns
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.RedundantSubqueryGatherer">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.RedundantSubqueryGatherer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DataAccess.Core.Linq.Common.Translation.RedundantSubqueryGatherer"/> class from being created.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.RedundantSubqueryGatherer.VisitSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Visits the select.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.RedundantSubqueryGatherer.VisitSubquery(DataAccess.Core.Linq.Common.Expressions.SubqueryExpression)">
            <summary>
            Visits the subquery.
            </summary>
            <param name="subquery">The subquery.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.SubqueryMerger">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.SubqueryMerger.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DataAccess.Core.Linq.Common.Translation.SubqueryMerger"/> class from being created.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.SubqueryMerger.Merge(System.Linq.Expressions.Expression)">
            <summary>
            Merges the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.SubqueryMerger.VisitSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Visits the select.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.VariableSubstitutor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.VariableSubstitutor.#ctor(System.Collections.Generic.Dictionary{System.String,System.Linq.Expressions.Expression})">
            <summary>
            Prevents a default instance of the <see cref="T:DataAccess.Core.Linq.Common.VariableSubstitutor"/> class from being created.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.VariableSubstitutor.Substitute(System.Collections.Generic.Dictionary{System.String,System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
            <summary>
            Substitutes the specified map.
            </summary>
            <param name="map">The map.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.VariableSubstitutor.VisitVariable(DataAccess.Core.Linq.Common.Expressions.VariableExpression)">
            <summary>
            Visits the variable.
            </summary>
            <param name="vex">The vex.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Enums.DbExpressionType">
            <summary>
            Extended node types for custom expressions
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Enums.Indentation">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Enums.Indentation.Same">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Enums.Indentation.Inner">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Enums.Indentation.Outer">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Enums.JoinType">
            <summary>
            A kind of SQL join
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Enums.OrderType">
            <summary>
            An SQL OrderBy order type 
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.ExecutionBuilder">
            <summary>
            Builds an execution plan for a query expression
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.#ctor(DataAccess.Core.Linq.Common.Language.QueryLinguist,DataAccess.Core.Linq.Common.QueryPolicy,System.Linq.Expressions.Expression)">
            <summary>
            Prevents a default instance of the <see cref="T:DataAccess.Core.Linq.Common.ExecutionBuilder"/> class from being created.
            </summary>
            <param name="linguist">The linguist.</param>
            <param name="policy">The policy.</param>
            <param name="executor">The executor.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.Build(DataAccess.Core.Linq.Common.Language.QueryLinguist,DataAccess.Core.Linq.Common.QueryPolicy,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Builds the specified linguist.
            </summary>
            <param name="linguist">The linguist.</param>
            <param name="policy">The policy.</param>
            <param name="expression">The expression.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.Build(System.Linq.Expressions.Expression)">
            <summary>
            Builds the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.AddVariables(System.Linq.Expressions.Expression)">
            <summary>
            Adds the variables.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.MakeSequence(System.Collections.Generic.IList{System.Linq.Expressions.Expression})">
            <summary>
            Makes the sequence.
            </summary>
            <param name="expressions">The expressions.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.Sequence(System.Object[])">
            <summary>
            Sequences the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.Batch``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
            Batches the specified items.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="items">The items.</param>
            <param name="selector">The selector.</param>
            <param name="stream">if set to <c>true</c> [stream].</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.MakeAssign(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Makes the assign.
            </summary>
            <param name="variable">The variable.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.Assign``1(``0@,``0)">
            <summary>
            Assigns the specified variable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="variable">The variable.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.BuildInner(System.Linq.Expressions.Expression)">
            <summary>
            Builds the inner.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits the binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.VisitClientJoin(DataAccess.Core.Linq.Common.Expressions.ClientJoinExpression)">
            <summary>
            Visits the client join.
            </summary>
            <param name="join">The join.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.VisitProjection(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression)">
            <summary>
            Visits the projection.
            </summary>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.Parameterize(System.Linq.Expressions.Expression)">
            <summary>
            Parameterizes the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.ExecuteProjection(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression,System.Boolean)">
            <summary>
            Executes the projection.
            </summary>
            <param name="projection">The projection.</param>
            <param name="okayToDefer">if set to <c>true</c> [okay to defer].</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.ExecuteProjection(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression,System.Boolean,DataAccess.Core.Linq.Common.QueryCommand,System.Linq.Expressions.Expression[])">
            <summary>
            Executes the projection.
            </summary>
            <param name="projection">The projection.</param>
            <param name="okayToDefer">if set to <c>true</c> [okay to defer].</param>
            <param name="command">The command.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.BuildExecuteBatch(DataAccess.Core.Linq.Common.Expressions.BatchExpression)">
            <summary>
            Builds the execute batch.
            </summary>
            <param name="batch">The batch.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.VisitCommand(DataAccess.Core.Linq.Common.Expressions.CommandExpression)">
            <summary>
            Visits the command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.IsMultipleCommands(DataAccess.Core.Linq.Common.Expressions.CommandExpression)">
            <summary>
            Determines whether [is multiple commands] [the specified command].
            </summary>
            <param name="command">The command.</param>
            <returns>
              <c>true</c> if [is multiple commands] [the specified command]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.VisitBlock(DataAccess.Core.Linq.Common.Expressions.BlockCommand)">
            <summary>
            Visits the block.
            </summary>
            <param name="block">The block.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.VisitIf(DataAccess.Core.Linq.Common.Expressions.IFCommand)">
            <summary>
            Visits if.
            </summary>
            <param name="ifx">The ifx.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.VisitFunction(DataAccess.Core.Linq.Common.Expressions.FunctionExpression)">
            <summary>
            Visits the function.
            </summary>
            <param name="func">The func.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.VisitExists(DataAccess.Core.Linq.Common.Expressions.ExistsExpression)">
            <summary>
            Visits the exists.
            </summary>
            <param name="exists">The exists.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.VisitDeclaration(DataAccess.Core.Linq.Common.Expressions.DeclarationCommand)">
            <summary>
            Visits the declaration.
            </summary>
            <param name="decl">The decl.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.BuildExecuteCommand(DataAccess.Core.Linq.Common.Expressions.CommandExpression)">
            <summary>
            Builds the execute command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.VisitOuterJoined(DataAccess.Core.Linq.Common.Expressions.OuterJoinedExpression)">
            <summary>
            Visits the outer joined.
            </summary>
            <param name="outer">The outer.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExecutionBuilder.VisitColumn(DataAccess.Core.Linq.Common.Expressions.ColumnExpression)">
            <summary>
            Visits the column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.ExpressionComparer">
            <summary>
            Compare two expressions to determine if they are equivalent
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.#ctor(DataAccess.Core.Linq.Common.ScopedDictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.ExpressionComparer"/> class.
            </summary>
            <param name="parameterScope">The parameter scope.</param>
            <param name="fnCompare">The fn compare.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.AreEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Ares the equal.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.AreEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Ares the equal.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="fnCompare">The fn compare.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.AreEqual(DataAccess.Core.Linq.Common.ScopedDictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Ares the equal.
            </summary>
            <param name="parameterScope">The parameter scope.</param>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.AreEqual(DataAccess.Core.Linq.Common.ScopedDictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Ares the equal.
            </summary>
            <param name="parameterScope">The parameter scope.</param>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="fnCompare">The fn compare.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.Compare(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Compares the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareUnary(System.Linq.Expressions.UnaryExpression,System.Linq.Expressions.UnaryExpression)">
            <summary>
            Compares the unary.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareBinary(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.BinaryExpression)">
            <summary>
            Compares the binary.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareTypeIs(System.Linq.Expressions.TypeBinaryExpression,System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Compares the type is.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareConditional(System.Linq.Expressions.ConditionalExpression,System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Compares the conditional.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareConstant(System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression)">
            <summary>
            Compares the constant.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareParameter(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Compares the parameter.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareMemberAccess(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.MemberExpression)">
            <summary>
            Compares the member access.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareMethodCall(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Compares the method call.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareLambda(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Compares the lambda.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareNew(System.Linq.Expressions.NewExpression,System.Linq.Expressions.NewExpression)">
            <summary>
            Compares the new.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression},System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Compares the expression list.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareMemberList(System.Collections.ObjectModel.ReadOnlyCollection{System.Reflection.MemberInfo},System.Collections.ObjectModel.ReadOnlyCollection{System.Reflection.MemberInfo})">
            <summary>
            Compares the member list.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareNewArray(System.Linq.Expressions.NewArrayExpression,System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Compares the new array.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareInvocation(System.Linq.Expressions.InvocationExpression,System.Linq.Expressions.InvocationExpression)">
            <summary>
            Compares the invocation.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareMemberInit(System.Linq.Expressions.MemberInitExpression,System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Compares the member init.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding},System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Compares the binding list.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareBinding(System.Linq.Expressions.MemberBinding,System.Linq.Expressions.MemberBinding)">
            <summary>
            Compares the binding.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareMemberAssignment(System.Linq.Expressions.MemberAssignment,System.Linq.Expressions.MemberAssignment)">
            <summary>
            Compares the member assignment.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareMemberListBinding(System.Linq.Expressions.MemberListBinding,System.Linq.Expressions.MemberListBinding)">
            <summary>
            Compares the member list binding.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding,System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Compares the member member binding.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareListInit(System.Linq.Expressions.ListInitExpression,System.Linq.Expressions.ListInitExpression)">
            <summary>
            Compares the list init.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareElementInitList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit},System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Compares the element init list.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionComparer.CompareElementInit(System.Linq.Expressions.ElementInit,System.Linq.Expressions.ElementInit)">
            <summary>
            Compares the element init.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.ExpressionComparer.FnCompare">
            <summary>
            Gets the fn compare.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Executor">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.QueryExecutor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryExecutor.Convert(System.Object,System.Type)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryExecutor.Execute``1(DataAccess.Core.Linq.Common.QueryCommand,System.Func{DataAccess.Core.Linq.Common.FieldReader,``0},DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Object[])">
            <summary>
            Executes the specified command.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command">The command.</param>
            <param name="fnProjector">The fn projector.</param>
            <param name="entity">The entity.</param>
            <param name="paramValues">The param values.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryExecutor.ExecuteCommand(DataAccess.Core.Linq.Common.QueryCommand,System.Object[])">
            <summary>
            Executes the command.
            </summary>
            <param name="query">The query.</param>
            <param name="paramValues">The param values.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Executor.#ctor(DataAccess.Core.Linq.DBQueryProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Executor"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Executor.Convert(System.Object,System.Type)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Executor.Execute``1(DataAccess.Core.Linq.Common.QueryCommand,System.Func{DataAccess.Core.Linq.Common.FieldReader,``0},DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Object[])">
            <summary>
            Executes the specified command.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command">The command.</param>
            <param name="fnProjector">The fn projector.</param>
            <param name="entity">The entity.</param>
            <param name="paramValues">The param values.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Executor.GetCommand(DataAccess.Core.Linq.Common.QueryCommand,System.Object[])">
            <summary>
            Get an ADO command object initialized with the command-text and parameters
            </summary>
            <param name="query">The query.</param>
            <param name="paramValues">The param values.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Executor.SetParameterValues(DataAccess.Core.Linq.Common.QueryCommand,System.Data.IDbCommand,System.Object[])">
            <summary>
            Sets the parameter values.
            </summary>
            <param name="query">The query.</param>
            <param name="command">The command.</param>
            <param name="paramValues">The param values.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Executor.ExecuteCommand(DataAccess.Core.Linq.Common.QueryCommand,System.Object[])">
            <summary>
            Executes the command.
            </summary>
            <param name="query">The query.</param>
            <param name="paramValues">The param values.</param>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Executor.Provider">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Executor.BufferResultRows">
            <summary>
            Gets a value indicating whether [buffer result rows].
            </summary>
            <value>
              <c>true</c> if [buffer result rows]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.ExpressionReplacer">
            <summary>
            Replaces references to one specific instance of an expression node with another node
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionReplacer.Replace(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Replaces the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="searchFor">The search for.</param>
            <param name="replaceWith">The replace with.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionReplacer.ReplaceAll(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[],System.Linq.Expressions.Expression[])">
            <summary>
            Replaces all.
            </summary>
            <param name="expression">The expression.</param>
            <param name="searchFor">The search for.</param>
            <param name="replaceWith">The replace with.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionReplacer.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified exp.
            </summary>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.AggregateExpression">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.DbExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpression.#ctor(DataAccess.Core.Linq.Enums.DbExpressionType,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.DbExpression"/> class.
            </summary>
            <param name="eType">Type of the e.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.AggregateExpression.#ctor(System.Type,System.String,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.AggregateExpression"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="aggregateName">Name of the aggregate.</param>
            <param name="argument">The argument.</param>
            <param name="isDistinct">if set to <c>true</c> [is distinct].</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.AggregateExpression.AggregateName">
            <summary>
            Gets the name of the aggregate.
            </summary>
            <value>
            The name of the aggregate.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.AggregateExpression.Argument">
            <summary>
            Gets the argument.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.AggregateExpression.IsDistinct">
            <summary>
            Gets a value indicating whether this instance is distinct.
            </summary>
            <value>
            	<c>true</c> if this instance is distinct; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.AggregateSubqueryExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.AggregateSubqueryExpression.#ctor(DataAccess.Core.Linq.Common.TableAlias,System.Linq.Expressions.Expression,DataAccess.Core.Linq.Common.Expressions.ScalarExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.AggregateSubqueryExpression"/> class.
            </summary>
            <param name="groupByAlias">The group by alias.</param>
            <param name="aggregateInGroupSelect">The aggregate in group select.</param>
            <param name="aggregateAsSubquery">The aggregate as subquery.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.AggregateSubqueryExpression.GroupByAlias">
            <summary>
            Gets the group by alias.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.AggregateSubqueryExpression.AggregateInGroupSelect">
            <summary>
            Gets the aggregate in group select.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.AggregateSubqueryExpression.AggregateAsSubquery">
            <summary>
            Gets the aggregate as subquery.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.Aggregator">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.Aggregator.GetAggregator(System.Type,System.Type)">
            <summary>
            Get a function that coerces a sequence of one type into another type.
            This is primarily used for aggregators stored in ProjectionExpression's, which are used to represent the
            final transformation of the entire result set of a query.
            </summary>
            <param name="expectedType">The expected type.</param>
            <param name="actualType">The actual type.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.Aggregator.CoerceElement(System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Coerces the element.
            </summary>
            <param name="expectedElementType">Expected type of the element.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.AliasedExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.AliasedExpression.#ctor(DataAccess.Core.Linq.Enums.DbExpressionType,System.Type,DataAccess.Core.Linq.Common.TableAlias)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.AliasedExpression"/> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="type">The type.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.AliasedExpression.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>
            The alias.
            </value>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.BatchExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.BatchExpression.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.BatchExpression"/> class.
            </summary>
            <param name="input">The input.</param>
            <param name="operation">The operation.</param>
            <param name="batchSize">Size of the batch.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.BatchExpression.Input">
            <summary>
            Gets the input.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.BatchExpression.Operation">
            <summary>
            Gets the operation.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.BatchExpression.BatchSize">
            <summary>
            Gets the size of the batch.
            </summary>
            <value>
            The size of the batch.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.BatchExpression.Stream">
            <summary>
            Gets the stream.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.BetweenExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.BetweenExpression.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.BetweenExpression"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="lower">The lower.</param>
            <param name="upper">The upper.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.BetweenExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.BetweenExpression.Lower">
            <summary>
            Gets the lower.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.BetweenExpression.Upper">
            <summary>
            Gets the upper.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.BlockCommand">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.CommandExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.CommandExpression.#ctor(DataAccess.Core.Linq.Enums.DbExpressionType,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.CommandExpression"/> class.
            </summary>
            <param name="eType">Type of the e.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.BlockCommand.#ctor(System.Collections.Generic.IList{System.Linq.Expressions.Expression})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.BlockCommand"/> class.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.BlockCommand.#ctor(System.Linq.Expressions.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.BlockCommand"/> class.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.ClientJoinExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.ClientJoinExpression.#ctor(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.ClientJoinExpression"/> class.
            </summary>
            <param name="projection">The projection.</param>
            <param name="outerKey">The outer key.</param>
            <param name="innerKey">The inner key.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.ClientJoinExpression.OuterKey">
            <summary>
            Gets the outer key.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.ClientJoinExpression.InnerKey">
            <summary>
            Gets the inner key.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.ClientJoinExpression.Projection">
            <summary>
            Gets the projection.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.ColumnExpression">
            <summary>
            A custom expression node that represents a reference to a column in a SQL query
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.ColumnExpression.#ctor(System.Type,DataAccess.Core.Linq.Common.TableAlias,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.ColumnExpression"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="queryType">Type of the query.</param>
            <param name="alias">The alias.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.ColumnExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.ColumnExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.ColumnExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.ColumnExpression.Equals(DataAccess.Core.Linq.Common.Expressions.ColumnExpression)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.ColumnExpression.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.ColumnExpression.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer">
            <summary>
            Determines if two expressions are equivalent. Supports DbExpression nodes.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.#ctor(DataAccess.Core.Linq.Common.ScopedDictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Func{System.Object,System.Object,System.Boolean},DataAccess.Core.Linq.Common.ScopedDictionary{DataAccess.Core.Linq.Common.TableAlias,DataAccess.Core.Linq.Common.TableAlias})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer"/> class.
            </summary>
            <param name="parameterScope">The parameter scope.</param>
            <param name="fnCompare">The fn compare.</param>
            <param name="aliasScope">The alias scope.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.AreEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Ares the equal.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.AreEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Ares the equal.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="fnCompare">The fn compare.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.AreEqual(DataAccess.Core.Linq.Common.ScopedDictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},DataAccess.Core.Linq.Common.ScopedDictionary{DataAccess.Core.Linq.Common.TableAlias,DataAccess.Core.Linq.Common.TableAlias},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Ares the equal.
            </summary>
            <param name="parameterScope">The parameter scope.</param>
            <param name="aliasScope">The alias scope.</param>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.AreEqual(DataAccess.Core.Linq.Common.ScopedDictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},DataAccess.Core.Linq.Common.ScopedDictionary{DataAccess.Core.Linq.Common.TableAlias,DataAccess.Core.Linq.Common.TableAlias},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Ares the equal.
            </summary>
            <param name="parameterScope">The parameter scope.</param>
            <param name="aliasScope">The alias scope.</param>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="fnCompare">The fn compare.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.Compare(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Compares the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareTable(DataAccess.Core.Linq.Common.Expressions.TableExpression,DataAccess.Core.Linq.Common.Expressions.TableExpression)">
            <summary>
            Compares the table.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareColumn(DataAccess.Core.Linq.Common.Expressions.ColumnExpression,DataAccess.Core.Linq.Common.Expressions.ColumnExpression)">
            <summary>
            Compares the column.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareAlias(DataAccess.Core.Linq.Common.TableAlias,DataAccess.Core.Linq.Common.TableAlias)">
            <summary>
            Compares the alias.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression,DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Compares the select.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.MapAliases(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Maps the aliases.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareOrderList(System.Collections.ObjectModel.ReadOnlyCollection{DataAccess.Core.Linq.Common.Expressions.OrderExpression},System.Collections.ObjectModel.ReadOnlyCollection{DataAccess.Core.Linq.Common.Expressions.OrderExpression})">
            <summary>
            Compares the order list.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareColumnDeclarations(System.Collections.ObjectModel.ReadOnlyCollection{DataAccess.Core.Linq.Common.ColumnDeclaration},System.Collections.ObjectModel.ReadOnlyCollection{DataAccess.Core.Linq.Common.ColumnDeclaration})">
            <summary>
            Compares the column declarations.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareJoin(DataAccess.Core.Linq.Common.Expressions.JoinExpression,DataAccess.Core.Linq.Common.Expressions.JoinExpression)">
            <summary>
            Compares the join.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareAggregate(DataAccess.Core.Linq.Common.Expressions.AggregateExpression,DataAccess.Core.Linq.Common.Expressions.AggregateExpression)">
            <summary>
            Compares the aggregate.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareIsNull(DataAccess.Core.Linq.Common.Expressions.IsNullExpression,DataAccess.Core.Linq.Common.Expressions.IsNullExpression)">
            <summary>
            Compares the is null.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareBetween(DataAccess.Core.Linq.Common.Expressions.BetweenExpression,DataAccess.Core.Linq.Common.Expressions.BetweenExpression)">
            <summary>
            Compares the between.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareRowNumber(DataAccess.Core.Linq.Common.Expressions.RowNumberExpression,DataAccess.Core.Linq.Common.Expressions.RowNumberExpression)">
            <summary>
            Compares the row number.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareNamedValue(DataAccess.Core.Linq.Common.Expressions.NamedValueExpression,DataAccess.Core.Linq.Common.Expressions.NamedValueExpression)">
            <summary>
            Compares the named value.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareSubquery(DataAccess.Core.Linq.Common.Expressions.SubqueryExpression,DataAccess.Core.Linq.Common.Expressions.SubqueryExpression)">
            <summary>
            Compares the subquery.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareScalar(DataAccess.Core.Linq.Common.Expressions.ScalarExpression,DataAccess.Core.Linq.Common.Expressions.ScalarExpression)">
            <summary>
            Compares the scalar.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareExists(DataAccess.Core.Linq.Common.Expressions.ExistsExpression,DataAccess.Core.Linq.Common.Expressions.ExistsExpression)">
            <summary>
            Compares the exists.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareIn(DataAccess.Core.Linq.Common.Expressions.InExpression,DataAccess.Core.Linq.Common.Expressions.InExpression)">
            <summary>
            Compares the in.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareAggregateSubquery(DataAccess.Core.Linq.Common.Expressions.AggregateSubqueryExpression,DataAccess.Core.Linq.Common.Expressions.AggregateSubqueryExpression)">
            <summary>
            Compares the aggregate subquery.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareProjection(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression,DataAccess.Core.Linq.Common.Expressions.ProjectionExpression)">
            <summary>
            Compares the projection.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareColumnAssignments(System.Collections.ObjectModel.ReadOnlyCollection{DataAccess.Core.Linq.ColumnAssignment},System.Collections.ObjectModel.ReadOnlyCollection{DataAccess.Core.Linq.ColumnAssignment})">
            <summary>
            Compares the column assignments.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareBatch(DataAccess.Core.Linq.Common.Expressions.BatchExpression,DataAccess.Core.Linq.Common.Expressions.BatchExpression)">
            <summary>
            Compares the batch.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareIf(DataAccess.Core.Linq.Common.Expressions.IFCommand,DataAccess.Core.Linq.Common.Expressions.IFCommand)">
            <summary>
            Compares if.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareBlock(DataAccess.Core.Linq.Common.Expressions.BlockCommand,DataAccess.Core.Linq.Common.Expressions.BlockCommand)">
            <summary>
            Compares the block.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareFunction(DataAccess.Core.Linq.Common.Expressions.FunctionExpression,DataAccess.Core.Linq.Common.Expressions.FunctionExpression)">
            <summary>
            Compares the function.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionComparer.CompareEntity(DataAccess.Core.Linq.Common.Expressions.EntityExpression,DataAccess.Core.Linq.Common.Expressions.EntityExpression)">
            <summary>
            Compares the entity.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Language.JoinColumnGatherer">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.Language.JoinColumnGatherer.aliases">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.Language.JoinColumnGatherer.columns">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.JoinColumnGatherer.#ctor(System.Collections.Generic.HashSet{DataAccess.Core.Linq.Common.TableAlias})">
            <summary>
            Prevents a default instance of the <see cref="T:DataAccess.Core.Linq.Common.Language.JoinColumnGatherer"/> class from being created.
            </summary>
            <param name="aliases">The aliases.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.JoinColumnGatherer.Gather(System.Collections.Generic.HashSet{DataAccess.Core.Linq.Common.TableAlias},DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Gathers the specified aliases.
            </summary>
            <param name="aliases">The aliases.</param>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.JoinColumnGatherer.Gather(System.Linq.Expressions.Expression)">
            <summary>
            Gathers the specified expression.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.JoinColumnGatherer.GetColumn(System.Linq.Expressions.Expression)">
            <summary>
            Gets the column.
            </summary>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.JoinColumnGatherer.IsExternalColumn(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether [is external column] [the specified exp].
            </summary>
            <param name="exp">The exp.</param>
            <returns>
              <c>true</c> if [is external column] [the specified exp]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.DbExpressionReplacer">
            <summary>
            Replaces references to one specific instance of an expression node with another node.
            Supports DbExpression nodes
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.Expressions.DbExpressionReplacer.searchFor">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.Expressions.DbExpressionReplacer.replaceWith">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionReplacer.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Prevents a default instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.DbExpressionReplacer"/> class from being created.
            </summary>
            <param name="searchFor">The search for.</param>
            <param name="replaceWith">The replace with.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionReplacer.Replace(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Replaces the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="searchFor">The search for.</param>
            <param name="replaceWith">The replace with.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionReplacer.ReplaceAll(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[],System.Linq.Expressions.Expression[])">
            <summary>
            Replaces all.
            </summary>
            <param name="expression">The expression.</param>
            <param name="searchFor">The search for.</param>
            <param name="replaceWith">The replace with.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionReplacer.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified exp.
            </summary>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter">
            <summary>
            Writes out an expression tree (including DbExpression nodes) in a C#-ish syntax
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.ExpressionWriter">
            <summary>
            Writes out an expression tree in a C#-ish syntax
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.ExpressionWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.Write(System.IO.TextWriter,System.Linq.Expressions.Expression)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.WriteToString(System.Linq.Expressions.Expression)">
            <summary>
            Writes to string.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.WriteLine(DataAccess.Core.Linq.Enums.Indentation)">
            <summary>
            Writes the line.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.Write(System.String)">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.Indent(DataAccess.Core.Linq.Enums.Indentation)">
            <summary>
            Indents the specified style.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.GetOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Gets the operator.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the binary.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the unary.
            </summary>
            <param name="u">The u.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.GetTypeName(System.Type)">
            <summary>
            Gets the name of the type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the conditional.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visits the binding list.
            </summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits the element initializer.
            </summary>
            <param name="initializer">The initializer.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visits the element initializer list.
            </summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits the expression list.
            </summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits the invocation.
            </summary>
            <param name="iv">The iv.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits the lambda.
            </summary>
            <param name="lambda">The lambda.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits the list init.
            </summary>
            <param name="init">The init.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member access.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits the member assignment.
            </summary>
            <param name="assignment">The assignment.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the member init.
            </summary>
            <param name="init">The init.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits the member list binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits the member member binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the method call.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the new.
            </summary>
            <param name="nex">The nex.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the new array.
            </summary>
            <param name="na">The na.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the parameter.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits the type is.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ExpressionWriter.VisitUnknown(System.Linq.Expressions.Expression)">
            <summary>
            Visits the unknown.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.ExpressionWriter.IndentationWidth">
            <summary>
            Gets or sets the width of the indentation.
            </summary>
            <value>
            The width of the indentation.
            </value>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.aliasMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.#ctor(System.IO.TextWriter,DataAccess.Core.Linq.Common.QueryLanguage)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.Write(System.IO.TextWriter,System.Linq.Expressions.Expression)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.Write(System.IO.TextWriter,DataAccess.Core.Linq.Common.QueryLanguage,System.Linq.Expressions.Expression)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="language">The language.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.WriteToString(System.Linq.Expressions.Expression)">
            <summary>
            Writes to string.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.WriteToString(DataAccess.Core.Linq.Common.QueryLanguage,System.Linq.Expressions.Expression)">
            <summary>
            Writes to string.
            </summary>
            <param name="language">The language.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified exp.
            </summary>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.AddAlias(DataAccess.Core.Linq.Common.TableAlias)">
            <summary>
            Adds the alias.
            </summary>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.VisitProjection(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression)">
            <summary>
            Visits the projection.
            </summary>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.VisitClientJoin(DataAccess.Core.Linq.Common.Expressions.ClientJoinExpression)">
            <summary>
            Visits the client join.
            </summary>
            <param name="join">The join.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.VisitOuterJoined(DataAccess.Core.Linq.Common.Expressions.OuterJoinedExpression)">
            <summary>
            Visits the outer joined.
            </summary>
            <param name="outer">The outer.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.VisitSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Visits the select.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.VisitCommand(DataAccess.Core.Linq.Common.Expressions.CommandExpression)">
            <summary>
            Visits the command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.FormatQuery(System.Linq.Expressions.Expression)">
            <summary>
            Formats the query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.VisitBatch(DataAccess.Core.Linq.Common.Expressions.BatchExpression)">
            <summary>
            Visits the batch.
            </summary>
            <param name="batch">The batch.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.VisitVariable(DataAccess.Core.Linq.Common.Expressions.VariableExpression)">
            <summary>
            Visits the variable.
            </summary>
            <param name="vex">The vex.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.VisitFunction(DataAccess.Core.Linq.Common.Expressions.FunctionExpression)">
            <summary>
            Visits the function.
            </summary>
            <param name="function">The function.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.VisitEntity(DataAccess.Core.Linq.Common.Expressions.EntityExpression)">
            <summary>
            Visits the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DbExpressionWriter.VisitColumn(DataAccess.Core.Linq.Common.Expressions.ColumnExpression)">
            <summary>
            Visits the column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.DeclarationCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.DeclarationCommand.#ctor(System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.VariableDeclaration},DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.DeclarationCommand"/> class.
            </summary>
            <param name="variables">The variables.</param>
            <param name="source">The source.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.DeclarationCommand.Variables">
            <summary>
            Gets the variables.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.DeclarationCommand.Source">
            <summary>
            Gets the source.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.EntityExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.EntityExpression.#ctor(DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.EntityExpression"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.EntityExpression.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.EntityExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.ExistsExpression">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.SubqueryExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.SubqueryExpression.#ctor(DataAccess.Core.Linq.Enums.DbExpressionType,System.Type,DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.SubqueryExpression"/> class.
            </summary>
            <param name="eType">Type of the e.</param>
            <param name="type">The type.</param>
            <param name="select">The select.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.SubqueryExpression.Select">
            <summary>
            Gets the select.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.ExistsExpression.#ctor(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.ExistsExpression"/> class.
            </summary>
            <param name="select">The select.</param>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.FunctionExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.FunctionExpression.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.FunctionExpression"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.FunctionExpression.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.FunctionExpression.Arguments">
            <summary>
            Gets the arguments.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.IFCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.IFCommand.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.IFCommand"/> class.
            </summary>
            <param name="check">The check.</param>
            <param name="ifTrue">If true.</param>
            <param name="ifFalse">If false.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.IFCommand.Check">
            <summary>
            Gets the check.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.IFCommand.IfTrue">
            <summary>
            Gets if true.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.IFCommand.IfFalse">
            <summary>
            Gets if false.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.InExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.InExpression.#ctor(System.Linq.Expressions.Expression,DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.InExpression"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="select">The select.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.InExpression.#ctor(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.InExpression"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="values">The values.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.InExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.InExpression.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.IsNullExpression">
            <summary>
            Allows is-null tests against value-types like int and float
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.IsNullExpression.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.IsNullExpression"/> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.IsNullExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.JoinExpression">
            <summary>
            A custom expression node representing a SQL join clause
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.JoinExpression.#ctor(DataAccess.Core.Linq.Enums.JoinType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.JoinExpression"/> class.
            </summary>
            <param name="joinType">Type of the join.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.JoinExpression.Join">
            <summary>
            Gets the join.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.JoinExpression.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.JoinExpression.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.JoinExpression.Condition">
            <summary>
            Gets the condition.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.NamedValueExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.NamedValueExpression.#ctor(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.NamedValueExpression"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="queryType">Type of the query.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.NamedValueExpression.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.NamedValueExpression.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.OrderExpression">
            <summary>
            A pairing of an expression and an order type for use in a SQL Order By clause
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.OrderExpression.#ctor(DataAccess.Core.Linq.Enums.OrderType,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.OrderExpression"/> class.
            </summary>
            <param name="orderType">Type of the order.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.OrderExpression.OrderType">
            <summary>
            Gets the type of the order.
            </summary>
            <value>
            The type of the order.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.OrderExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.OuterJoinedExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.OuterJoinedExpression.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.OuterJoinedExpression"/> class.
            </summary>
            <param name="test">The test.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.OuterJoinedExpression.Test">
            <summary>
            Gets the test.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.OuterJoinedExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.ProjectionExpression">
            <summary>
            A custom expression representing the construction of one or more result objects from a 
            SQL select expression
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.ProjectionExpression.#ctor(DataAccess.Core.Linq.Common.Expressions.SelectExpression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.ProjectionExpression"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="projector">The projector.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.ProjectionExpression.#ctor(DataAccess.Core.Linq.Common.Expressions.SelectExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.ProjectionExpression"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="projector">The projector.</param>
            <param name="aggregator">The aggregator.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.ProjectionExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.ProjectionExpression.Select">
            <summary>
            Gets the select.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.ProjectionExpression.Projector">
            <summary>
            Gets the projector.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.ProjectionExpression.Aggregator">
            <summary>
            Gets the aggregator.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.ProjectionExpression.IsSingleton">
            <summary>
            Gets a value indicating whether this instance is singleton.
            </summary>
            <value>
            	<c>true</c> if this instance is singleton; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.ProjectionExpression.QueryText">
            <summary>
            Gets the query text.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.RowNumberExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.RowNumberExpression.#ctor(System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.Expressions.OrderExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.RowNumberExpression"/> class.
            </summary>
            <param name="orderBy">The order by.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.RowNumberExpression.OrderBy">
            <summary>
            Gets the order by.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.ScalarExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.ScalarExpression.#ctor(System.Type,DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.ScalarExpression"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="select">The select.</param>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.SelectExpression">
            <summary>
            A custom expression node used to represent a SQL SELECT expression
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.SelectExpression.#ctor(DataAccess.Core.Linq.Common.TableAlias,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.ColumnDeclaration},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.Expressions.OrderExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Boolean,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.SelectExpression"/> class.
            </summary>
            <param name="alias">The alias.</param>
            <param name="columns">The columns.</param>
            <param name="from">From.</param>
            <param name="where">The where.</param>
            <param name="orderBy">The order by.</param>
            <param name="groupBy">The group by.</param>
            <param name="isDistinct">if set to <c>true</c> [is distinct].</param>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <param name="reverse">if set to <c>true</c> [reverse].</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.SelectExpression.#ctor(DataAccess.Core.Linq.Common.TableAlias,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.ColumnDeclaration},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.Expressions.OrderExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.SelectExpression"/> class.
            </summary>
            <param name="alias">The alias.</param>
            <param name="columns">The columns.</param>
            <param name="from">From.</param>
            <param name="where">The where.</param>
            <param name="orderBy">The order by.</param>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.SelectExpression.#ctor(DataAccess.Core.Linq.Common.TableAlias,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.ColumnDeclaration},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.SelectExpression"/> class.
            </summary>
            <param name="alias">The alias.</param>
            <param name="columns">The columns.</param>
            <param name="from">From.</param>
            <param name="where">The where.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.SelectExpression.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.SelectExpression.From">
            <summary>
            Gets from.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.SelectExpression.Where">
            <summary>
            Gets the where.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.SelectExpression.OrderBy">
            <summary>
            Gets the order by.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.SelectExpression.GroupBy">
            <summary>
            Gets the group by.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.SelectExpression.IsDistinct">
            <summary>
            Gets a value indicating whether this instance is distinct.
            </summary>
            <value>
            	<c>true</c> if this instance is distinct; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.SelectExpression.Skip">
            <summary>
            Gets the skip.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.SelectExpression.Take">
            <summary>
            Gets the take.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.SelectExpression.IsReverse">
            <summary>
            Gets a value indicating whether this instance is reverse.
            </summary>
            <value>
            	<c>true</c> if this instance is reverse; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.SelectExpression.QueryText">
            <summary>
            Gets the query text.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.TableExpression">
            <summary>
            A custom expression node that represents a table reference in a SQL query
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.TableExpression.#ctor(DataAccess.Core.Linq.Common.TableAlias,DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.TableExpression"/> class.
            </summary>
            <param name="alias">The alias.</param>
            <param name="entity">The entity.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.TableExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.TableExpression.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.TableExpression.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Expressions.VariableExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Expressions.VariableExpression.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Expressions.VariableExpression"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="queryType">Type of the query.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Expressions.VariableExpression.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.FieldReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.FieldReader"/> class.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetFieldType(System.Int32)">
            <summary>
            Gets the type of the field.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.IsDBNull(System.Int32)">
            <summary>
            Determines whether [is DB null] [the specified ordinal].
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns>
              <c>true</c> if [is DB null] [the specified ordinal]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetValue``1(System.Int32)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetByte(System.Int32)">
            <summary>
            Gets the byte.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetChar(System.Int32)">
            <summary>
            Gets the char.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetDateTime(System.Int32)">
            <summary>
            Gets the date time.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetDecimal(System.Int32)">
            <summary>
            Gets the decimal.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetDouble(System.Int32)">
            <summary>
            Gets the double.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetSingle(System.Int32)">
            <summary>
            Gets the single.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetGuid(System.Int32)">
            <summary>
            Gets the GUID.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetInt16(System.Int32)">
            <summary>
            Gets the int16.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetInt32(System.Int32)">
            <summary>
            Gets the int32.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetInt64(System.Int32)">
            <summary>
            Gets the int64.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetString(System.Int32)">
            <summary>
            Gets the string.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadValue``1(System.Int32)">
            <summary>
            Reads the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadNullableValue``1(System.Int32)">
            <summary>
            Reads the nullable value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadByte(System.Int32)">
            <summary>
            Reads the byte.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadNullableByte(System.Int32)">
            <summary>
            Reads the nullable byte.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadChar(System.Int32)">
            <summary>
            Reads the char.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadNullableChar(System.Int32)">
            <summary>
            Reads the nullable char.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadDateTime(System.Int32)">
            <summary>
            Reads the date time.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadNullableDateTime(System.Int32)">
            <summary>
            Reads the nullable date time.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadDecimal(System.Int32)">
            <summary>
            Reads the decimal.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadNullableDecimal(System.Int32)">
            <summary>
            Reads the nullable decimal.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadDouble(System.Int32)">
            <summary>
            Reads the double.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadNullableDouble(System.Int32)">
            <summary>
            Reads the nullable double.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadSingle(System.Int32)">
            <summary>
            Reads the single.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadNullableSingle(System.Int32)">
            <summary>
            Reads the nullable single.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadGuid(System.Int32)">
            <summary>
            Reads the GUID.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadNullableGuid(System.Int32)">
            <summary>
            Reads the nullable GUID.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadInt16(System.Int32)">
            <summary>
            Reads the int16.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadNullableInt16(System.Int32)">
            <summary>
            Reads the nullable int16.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadInt32(System.Int32)">
            <summary>
            Reads the int32.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadNullableInt32(System.Int32)">
            <summary>
            Reads the nullable int32.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadInt64(System.Int32)">
            <summary>
            Reads the int64.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadNullableInt64(System.Int32)">
            <summary>
            Reads the nullable int64.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadString(System.Int32)">
            <summary>
            Reads the string.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadByteArray(System.Int32)">
            <summary>
            Reads the byte array.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.ReadCharArray(System.Int32)">
            <summary>
            Reads the char array.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.FieldReader.GetReaderMethod(System.Type)">
            <summary>
            Gets the reader method.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.FieldReader.FieldCount">
            <summary>
            Gets the field count.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Grouping`2">
            <summary>
            A Grouping parser
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Grouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Grouping`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="group">The group.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Grouping`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Grouping`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Grouping`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.QueryLanguage">
            <summary>
            Defines the language rules for the query provider
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryLanguage.GetGeneratedIdExpression(System.Reflection.MemberInfo)">
            <summary>
            Gets the generated id expression.
            </summary>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryLanguage.Quote(System.String)">
            <summary>
            Quotes the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryLanguage.GetRowsAffectedExpression(System.Linq.Expressions.Expression)">
            <summary>
            Gets the rows affected expression.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryLanguage.IsRowsAffectedExpressions(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether [is rows affected expressions] [the specified expression].
            </summary>
            <param name="expression">The expression.</param>
            <returns>
              <c>true</c> if [is rows affected expressions] [the specified expression]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryLanguage.GetOuterJoinTest(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Gets the outer join test.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryLanguage.AddOuterJoinTest(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression)">
            <summary>
            Adds the outer join test.
            </summary>
            <param name="proj">The proj.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryLanguage.IsScalar(System.Type)">
            <summary>
            Determines whether the CLR type corresponds to a scalar data type in the query language
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryLanguage.IsAggregate(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified member is aggregate.
            </summary>
            <param name="member">The member.</param>
            <returns>
              <c>true</c> if the specified member is aggregate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryLanguage.AggregateArgumentIsPredicate(System.String)">
            <summary>
            Aggregates the argument is predicate.
            </summary>
            <param name="aggregateName">Name of the aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryLanguage.CanBeColumn(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the given expression can be represented as a column in a select expressionss
            </summary>
            <param name="expression">The expression.</param>
            <returns>
              <c>true</c> if this instance [can be column] the specified expression; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryLanguage.MustBeColumn(System.Linq.Expressions.Expression)">
            <summary>
            Musts the be column.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryLanguage.CreateLinguist(DataAccess.Core.Linq.Common.QueryTranslator)">
            <summary>
            Creates the linguist.
            </summary>
            <param name="translator">The translator.</param>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.QueryLanguage.AllowsMultipleCommands">
            <summary>
            Gets a value indicating whether [allows multiple commands].
            </summary>
            <value>
            	<c>true</c> if [allows multiple commands]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.QueryLanguage.AllowSubqueryInSelectWithoutFrom">
            <summary>
            Gets a value indicating whether [allow subquery in select without from].
            </summary>
            <value>
            	<c>true</c> if [allow subquery in select without from]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.QueryLanguage.AllowDistinctInAggregates">
            <summary>
            Gets a value indicating whether [allow distinct in aggregates].
            </summary>
            <value>
            	<c>true</c> if [allow distinct in aggregates]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Language.QueryLinguist">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.QueryLinguist.#ctor(DataAccess.Core.Linq.Common.QueryLanguage,DataAccess.Core.Linq.Common.QueryTranslator)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Language.QueryLinguist"/> class.
            </summary>
            <param name="language">The language.</param>
            <param name="translator">The translator.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.QueryLinguist.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Provides language specific query translation.  Use this to apply language specific rewrites or
            to make assertions/validations about the query.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.QueryLinguist.Format(System.Linq.Expressions.Expression)">
            <summary>
            Converts the query expression into text of this query language
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.QueryLinguist.Parameterize(System.Linq.Expressions.Expression)">
            <summary>
            Determine which sub-expressions must be parameters
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Language.QueryLinguist.Language">
            <summary>
            Gets the language.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Language.QueryLinguist.Translator">
            <summary>
            Gets the translator.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Language.SqlFormatter">
            <summary>
            Formats a query expression into common SQL language syntax
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.Language.SqlFormatter.sb">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.Language.SqlFormatter.depth">
            <summary>
            
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.Language.SqlFormatter.aliases">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.#ctor(DataAccess.Core.Linq.Common.QueryLanguage)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Language.SqlFormatter"/> class.
            </summary>
            <param name="language">The language.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.Format(System.Linq.Expressions.Expression)">
            <summary>
            Formats the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.Write(System.Object)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.WriteParameterName(System.String)">
            <summary>
            Writes the name of the parameter.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.WriteVariableName(System.String)">
            <summary>
            Writes the name of the variable.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.WriteAsAliasName(System.String)">
            <summary>
            Writes the name of as alias.
            </summary>
            <param name="aliasName">Name of the alias.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.WriteAliasName(System.String)">
            <summary>
            Writes the name of the alias.
            </summary>
            <param name="aliasName">Name of the alias.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.WriteAsColumnName(System.String)">
            <summary>
            Writes the name of as column.
            </summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.WriteColumnName(System.String)">
            <summary>
            Writes the name of the column.
            </summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.WriteTableName(System.String)">
            <summary>
            Writes the name of the table.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.Indent(DataAccess.Core.Linq.Enums.Indentation)">
            <summary>
            Indents the specified style.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.GetAliasName(DataAccess.Core.Linq.Common.TableAlias)">
            <summary>
            Gets the name of the alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.AddAlias(DataAccess.Core.Linq.Common.TableAlias)">
            <summary>
            Adds the alias.
            </summary>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.AddAliases(System.Linq.Expressions.Expression)">
            <summary>
            Adds the aliases.
            </summary>
            <param name="expr">The expr.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified exp.
            </summary>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member access.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the method call.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.IsInteger(System.Type)">
            <summary>
            Determines whether the specified type is integer.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is integer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the new.
            </summary>
            <param name="nex">The nex.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the unary.
            </summary>
            <param name="u">The u.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the binary.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.GetOperator(System.String)">
            <summary>
            Gets the operator.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.GetOperator(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Gets the operator.
            </summary>
            <param name="u">The u.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.GetOperator(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Gets the operator.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.IsBoolean(System.Type)">
            <summary>
            Determines whether the specified type is boolean.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is boolean; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.IsPredicate(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expr is predicate.
            </summary>
            <param name="expr">The expr.</param>
            <returns>
              <c>true</c> if the specified expr is predicate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitPredicate(System.Linq.Expressions.Expression)">
            <summary>
            Visits the predicate.
            </summary>
            <param name="expr">The expr.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitValue(System.Linq.Expressions.Expression)">
            <summary>
            Visits the value.
            </summary>
            <param name="expr">The expr.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the conditional.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.WriteValue(System.Object)">
            <summary>
            Writes the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitColumn(DataAccess.Core.Linq.Common.Expressions.ColumnExpression)">
            <summary>
            Visits the column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitProjection(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression)">
            <summary>
            Visits the projection.
            </summary>
            <param name="proj">The proj.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Visits the select.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.WriteTopClause(System.Linq.Expressions.Expression)">
            <summary>
            Writes the top clause.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.WriteColumns(System.Collections.ObjectModel.ReadOnlyCollection{DataAccess.Core.Linq.Common.ColumnDeclaration})">
            <summary>
            Writes the columns.
            </summary>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitSource(System.Linq.Expressions.Expression)">
            <summary>
            Visits the source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitJoin(DataAccess.Core.Linq.Common.Expressions.JoinExpression)">
            <summary>
            Visits the join.
            </summary>
            <param name="join">The join.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitJoinLeft(System.Linq.Expressions.Expression)">
            <summary>
            Visits the join left.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitJoinRight(System.Linq.Expressions.Expression)">
            <summary>
            Visits the join right.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.WriteAggregateName(System.String)">
            <summary>
            Writes the name of the aggregate.
            </summary>
            <param name="aggregateName">Name of the aggregate.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.RequiresAsteriskWhenNoArgument(System.String)">
            <summary>
            Requireses the asterisk when no argument.
            </summary>
            <param name="aggregateName">Name of the aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitAggregate(DataAccess.Core.Linq.Common.Expressions.AggregateExpression)">
            <summary>
            Visits the aggregate.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitIsNull(DataAccess.Core.Linq.Common.Expressions.IsNullExpression)">
            <summary>
            Visits the is null.
            </summary>
            <param name="isnull">The isnull.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitBetween(DataAccess.Core.Linq.Common.Expressions.BetweenExpression)">
            <summary>
            Visits the between.
            </summary>
            <param name="between">The between.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitRowNumber(DataAccess.Core.Linq.Common.Expressions.RowNumberExpression)">
            <summary>
            Visits the row number.
            </summary>
            <param name="rowNumber">The row number.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitScalar(DataAccess.Core.Linq.Common.Expressions.ScalarExpression)">
            <summary>
            Visits the scalar.
            </summary>
            <param name="subquery">The subquery.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitIn(DataAccess.Core.Linq.Common.Expressions.InExpression)">
            <summary>
            Visits the in.
            </summary>
            <param name="in">The @in.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitNamedValue(DataAccess.Core.Linq.Common.Expressions.NamedValueExpression)">
            <summary>
            Visits the named value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitIf(DataAccess.Core.Linq.Common.Expressions.IFCommand)">
            <summary>
            Visits if.
            </summary>
            <param name="ifx">The ifx.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitBlock(DataAccess.Core.Linq.Common.Expressions.BlockCommand)">
            <summary>
            Visits the block.
            </summary>
            <param name="block">The block.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitDeclaration(DataAccess.Core.Linq.Common.Expressions.DeclarationCommand)">
            <summary>
            Visits the declaration.
            </summary>
            <param name="decl">The decl.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitVariable(DataAccess.Core.Linq.Common.Expressions.VariableExpression)">
            <summary>
            Visits the variable.
            </summary>
            <param name="vex">The vex.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitStatement(System.Linq.Expressions.Expression)">
            <summary>
            Visits the statement.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Language.SqlFormatter.VisitFunction(DataAccess.Core.Linq.Common.Expressions.FunctionExpression)">
            <summary>
            Visits the function.
            </summary>
            <param name="func">The func.</param>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Language.SqlFormatter.HideColumnAliases">
            <summary>
            Gets or sets a value indicating whether [hide column aliases].
            </summary>
            <value>
              <c>true</c> if [hide column aliases]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Language.SqlFormatter.HideTableAliases">
            <summary>
            Gets or sets a value indicating whether [hide table aliases].
            </summary>
            <value>
              <c>true</c> if [hide table aliases]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Language.SqlFormatter.IndentationWidth">
            <summary>
            Gets or sets the width of the indentation.
            </summary>
            <value>
            The width of the indentation.
            </value>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Language.SqlFormatter.Language">
            <summary>
            Gets the language.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Language.SqlFormatter.IsNested">
            <summary>
            Gets or sets a value indicating whether this instance is nested.
            </summary>
            <value>
              <c>true</c> if this instance is nested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.PartialEvaluator">
            <summary>
            Rewrites an expression tree so that locally isolatable sub-expressions are evaluated and converted into ConstantExpression nodes.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.PartialEvaluator.Eval(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.PartialEvaluator.Eval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.PartialEvaluator.Eval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean},System.Func{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.Expression})">
            <summary>
            Evals the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="fnCanBeEvaluated">The fn can be evaluated.</param>
            <param name="fnPostEval">The fn post eval.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.PartialEvaluator.CanBeEvaluatedLocally(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether this instance [can be evaluated locally] the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>
              <c>true</c> if this instance [can be evaluated locally] the specified expression; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Query`1">
            <summary>
            A default implementation of IQueryable for use with QueryProvider
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Query`1.#ctor(System.Linq.IQueryProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Query`1"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Query`1.#ctor(System.Linq.IQueryProvider,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Query`1"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="staticType">Type of the static.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Query`1.#ctor(DataAccess.Core.Linq.Common.QueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Query`1"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Query`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Query`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Query`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Query`1.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.
              </returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Query`1.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <returns>
            The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
              </returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Query`1.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.
              </returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Query`1.QueryText">
            <summary>
            Gets the query text.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.QueryCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryCommand.#ctor(System.String,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.QueryParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.QueryCommand"/> class.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.QueryCommand.CommandText">
            <summary>
            Gets the command text.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.QueryCommand.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.QueryCompiler">
            <summary>
            Creates a reusable, parameterized representation of a query that caches the execution plan
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.ICreateExecutor">
            <summary>
            
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.QueryPolicy">
            <summary>
            Defines query execution and materialization policies. 
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.QueryPolicy"/> class.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryPolicy.IsIncluded(System.Reflection.MemberInfo)">
            <summary>
            Determines if a relationship property is to be included in the results of the query
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryPolicy.IsDeferLoaded(System.Reflection.MemberInfo)">
            <summary>
            Determines if a relationship property is included, but the query for the related data is 
            deferred until the property is first accessed.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.QueryProvider">
            <summary>
            A basic abstract LINQ query provider
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Interfaces.IQueryText">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Interfaces.IQueryText.GetQueryText(System.Linq.Expressions.Expression)">
            <summary>
            Gets the query text.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.QueryProvider"/> class.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryProvider.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates the query.
            </summary>
            <typeparam name="S"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryProvider.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable"/> object that can evaluate the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that can evaluate the query represented by the specified expression tree.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryProvider.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <typeparam name="S"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryProvider.GetQueryText(System.Linq.Expressions.Expression)">
            <summary>
            Gets the query text.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.QueryTranslator">
            <summary>
            Defines query execution and materialization policies. 
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryTranslator.#ctor(DataAccess.Core.Linq.Common.QueryLanguage,DataAccess.Core.Linq.Mapping.SauceMapping,DataAccess.Core.Linq.Common.QueryPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.QueryTranslator"/> class.
            </summary>
            <param name="language">The language.</param>
            <param name="mapping">The mapping.</param>
            <param name="policy">The policy.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.QueryTranslator.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Translates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.QueryTranslator.Linguist">
            <summary>
            Gets the linguist.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.QueryTranslator.Mapper">
            <summary>
            Gets the mapper.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.QueryTranslator.Police">
            <summary>
            Gets the police.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.ReadOnlyExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ReadOnlyExtensions.ToReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a read only list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.ReflectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ReflectionExtensions.GetValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="member">The member.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ReflectionExtensions.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="member">The member.</param>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.ScopedDictionary`2">
            <summary>
            
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ScopedDictionary`2.#ctor(DataAccess.Core.Linq.Common.ScopedDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.ScopedDictionary`2"/> class.
            </summary>
            <param name="previous">The previous.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ScopedDictionary`2.#ctor(DataAccess.Core.Linq.Common.ScopedDictionary{`0,`1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.ScopedDictionary`2"/> class.
            </summary>
            <param name="previous">The previous.</param>
            <param name="pairs">The pairs.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ScopedDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ScopedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.ScopedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:DataAccess.Core.Linq.StrongDelegate">
            <summary>
            Make a strongly-typed delegate to a weakly typed method (one that takes single object[] argument)
            (up to 8 arguments)
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.StrongDelegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)">
            <summary>
            Create a strongly typed delegate over a method with a weak signature
            </summary>
            <param name="delegateType">The strongly typed delegate's type</param>
            <param name="target"></param>
            <param name="method">Any method that takes a single array of objects and returns an object.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.StrongDelegate.CreateDelegate(System.Type,System.Func{System.Object[],System.Object})">
            <summary>
            Create a strongly typed delegate over a Func delegate with weak signature
            </summary>
            <param name="delegateType"></param>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.StrongDelegate.M``1">
            <summary>
            Ms this instance.
            </summary>
            <typeparam name="R"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.StrongDelegate.M``2(``0)">
            <summary>
            Ms the specified a1.
            </summary>
            <typeparam name="A1">The type of the 1.</typeparam>
            <typeparam name="R"></typeparam>
            <param name="a1">The a1.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.StrongDelegate.M``3(``0,``1)">
            <summary>
            Ms the specified a1.
            </summary>
            <typeparam name="A1">The type of the 1.</typeparam>
            <typeparam name="A2">The type of the 2.</typeparam>
            <typeparam name="R"></typeparam>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.StrongDelegate.M``4(``0,``1,``2)">
            <summary>
            Ms the specified a1.
            </summary>
            <typeparam name="A1">The type of the 1.</typeparam>
            <typeparam name="A2">The type of the 2.</typeparam>
            <typeparam name="A3">The type of the 3.</typeparam>
            <typeparam name="R"></typeparam>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
            <param name="a3">The a3.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.StrongDelegate.M``5(``0,``1,``2,``3)">
            <summary>
            Ms the specified a1.
            </summary>
            <typeparam name="A1">The type of the 1.</typeparam>
            <typeparam name="A2">The type of the 2.</typeparam>
            <typeparam name="A3">The type of the 3.</typeparam>
            <typeparam name="A4">The type of the 4.</typeparam>
            <typeparam name="R"></typeparam>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
            <param name="a3">The a3.</param>
            <param name="a4">The a4.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.StrongDelegate.M``6(``0,``1,``2,``3,``4)">
            <summary>
            Ms the specified a1.
            </summary>
            <typeparam name="A1">The type of the 1.</typeparam>
            <typeparam name="A2">The type of the 2.</typeparam>
            <typeparam name="A3">The type of the 3.</typeparam>
            <typeparam name="A4">The type of the 4.</typeparam>
            <typeparam name="A5">The type of the 5.</typeparam>
            <typeparam name="R"></typeparam>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
            <param name="a3">The a3.</param>
            <param name="a4">The a4.</param>
            <param name="a5">The a5.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.StrongDelegate.M``7(``0,``1,``2,``3,``4,``5)">
            <summary>
            Ms the specified a1.
            </summary>
            <typeparam name="A1">The type of the 1.</typeparam>
            <typeparam name="A2">The type of the 2.</typeparam>
            <typeparam name="A3">The type of the 3.</typeparam>
            <typeparam name="A4">The type of the 4.</typeparam>
            <typeparam name="A5">The type of the 5.</typeparam>
            <typeparam name="A6">The type of the 6.</typeparam>
            <typeparam name="R"></typeparam>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
            <param name="a3">The a3.</param>
            <param name="a4">The a4.</param>
            <param name="a5">The a5.</param>
            <param name="a6">The a6.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.StrongDelegate.M``8(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Ms the specified a1.
            </summary>
            <typeparam name="A1">The type of the 1.</typeparam>
            <typeparam name="A2">The type of the 2.</typeparam>
            <typeparam name="A3">The type of the 3.</typeparam>
            <typeparam name="A4">The type of the 4.</typeparam>
            <typeparam name="A5">The type of the 5.</typeparam>
            <typeparam name="A6">The type of the 6.</typeparam>
            <typeparam name="A7">The type of the 7.</typeparam>
            <typeparam name="R"></typeparam>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
            <param name="a3">The a3.</param>
            <param name="a4">The a4.</param>
            <param name="a5">The a5.</param>
            <param name="a6">The a6.</param>
            <param name="a7">The a7.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.StrongDelegate.M``9(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Ms the specified a1.
            </summary>
            <typeparam name="A1">The type of the 1.</typeparam>
            <typeparam name="A2">The type of the 2.</typeparam>
            <typeparam name="A3">The type of the 3.</typeparam>
            <typeparam name="A4">The type of the 4.</typeparam>
            <typeparam name="A5">The type of the 5.</typeparam>
            <typeparam name="A6">The type of the 6.</typeparam>
            <typeparam name="A7">The type of the 7.</typeparam>
            <typeparam name="A8">The type of the 8.</typeparam>
            <typeparam name="R"></typeparam>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
            <param name="a3">The a3.</param>
            <param name="a4">The a4.</param>
            <param name="a5">The a5.</param>
            <param name="a6">The a6.</param>
            <param name="a7">The a7.</param>
            <param name="a8">The a8.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.TableAlias">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TableAlias.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.TableAlias"/> class.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TableAlias.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.TopologicalSorter">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TopologicalSorter.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Sorts the specified items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="fnItemsBeforeMe">The fn items before me.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TopologicalSorter.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Sorts the specified items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="fnItemsBeforeMe">The fn items before me.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TopologicalSorter.SortItem``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.HashSet{``0},System.Collections.Generic.HashSet{``0},System.Collections.Generic.List{``0})">
            <summary>
            Sorts the item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
            <param name="fnItemsBeforeMe">The fn items before me.</param>
            <param name="seen">The seen.</param>
            <param name="done">The done.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:DataAccess.Core.Linq.AggregateChecker">
            <summary>
            Determines if a SelectExpression contains any aggregate expressions
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.AggregateChecker.VisitAggregate(DataAccess.Core.Linq.Common.Expressions.AggregateExpression)">
            <summary>
            Visits the aggregate.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.AggregateChecker.VisitSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Visits the select.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.AggregateChecker.VisitSubquery(DataAccess.Core.Linq.Common.Expressions.SubqueryExpression)">
            <summary>
            Visits the subquery.
            </summary>
            <param name="subquery">The subquery.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.AggregateRewriter">
            <summary>
            Rewrite aggregate expressions, moving them into same select expression that has the group-by clause
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.ClientJoinedProjectionRewriter">
            <summary>
            rewrites nested projections into client-side joins
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ClientJoinedProjectionRewriter.Rewrite(DataAccess.Core.Linq.Common.QueryPolicy,DataAccess.Core.Linq.Common.QueryLanguage,System.Linq.Expressions.Expression)">
            <summary>
            Rewrites the specified policy.
            </summary>
            <param name="policy">The policy.</param>
            <param name="language">The language.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ClientJoinedProjectionRewriter.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits the member assignment.
            </summary>
            <param name="assignment">The assignment.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ClientJoinedProjectionRewriter.VisitMemberAndExpression(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
            <summary>
            Visits the member and expression.
            </summary>
            <param name="member">The member.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ClientJoinedProjectionRewriter.VisitProjection(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression)">
            <summary>
            Visits the projection.
            </summary>
            <param name="proj">The proj.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ClientJoinedProjectionRewriter.VisitSubquery(DataAccess.Core.Linq.Common.Expressions.SubqueryExpression)">
            <summary>
            Visits the subquery.
            </summary>
            <param name="subquery">The subquery.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ClientJoinedProjectionRewriter.VisitCommand(DataAccess.Core.Linq.Common.Expressions.CommandExpression)">
            <summary>
            Visits the command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.ColumnMapper">
            <summary>
            Rewrite all column references to one or more aliases to a new single alias
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ColumnMapper.Map(System.Linq.Expressions.Expression,DataAccess.Core.Linq.Common.TableAlias,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.TableAlias})">
            <summary>
            Maps the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="newAlias">The new alias.</param>
            <param name="oldAliases">The old aliases.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ColumnMapper.Map(System.Linq.Expressions.Expression,DataAccess.Core.Linq.Common.TableAlias,DataAccess.Core.Linq.Common.TableAlias[])">
            <summary>
            Maps the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="newAlias">The new alias.</param>
            <param name="oldAliases">The old aliases.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ColumnMapper.VisitColumn(DataAccess.Core.Linq.Common.Expressions.ColumnExpression)">
            <summary>
            Visits the column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.ColumnProjector">
            <summary>
            Splits an expression into two parts
              1) a list of column declarations for sub-expressions that must be evaluated on the server
              2) a expression that describes how to combine/project the columns back together into the correct result
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ColumnProjector.ProjectColumns(DataAccess.Core.Linq.Common.QueryLanguage,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.ColumnDeclaration},DataAccess.Core.Linq.Common.TableAlias,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.TableAlias})">
            <summary>
            Projects the columns.
            </summary>
            <param name="language">The language.</param>
            <param name="expression">The expression.</param>
            <param name="existingColumns">The existing columns.</param>
            <param name="newAlias">The new alias.</param>
            <param name="existingAliases">The existing aliases.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ColumnProjector.ProjectColumns(DataAccess.Core.Linq.Common.QueryLanguage,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.ColumnDeclaration},DataAccess.Core.Linq.Common.TableAlias,DataAccess.Core.Linq.Common.TableAlias[])">
            <summary>
            Projects the columns.
            </summary>
            <param name="language">The language.</param>
            <param name="expression">The expression.</param>
            <param name="existingColumns">The existing columns.</param>
            <param name="newAlias">The new alias.</param>
            <param name="existingAliases">The existing aliases.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ColumnProjector.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.ComparisonRewriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ComparisonRewriter.Rewrite(DataAccess.Core.Linq.Mapping.SauceMapping,System.Linq.Expressions.Expression)">
            <summary>
            Rewrites the specified mapping.
            </summary>
            <param name="mapping">The mapping.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ComparisonRewriter.SkipConvert(System.Linq.Expressions.Expression)">
            <summary>
            Skips the convert.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ComparisonRewriter.Compare(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Compares the specified bop.
            </summary>
            <param name="bop">The bop.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.ComparisonRewriter.MakePredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Boolean)">
            <summary>
            Makes the predicate.
            </summary>
            <param name="e1">The e1.</param>
            <param name="e2">The e2.</param>
            <param name="members">The members.</param>
            <param name="negate">if set to <c>true</c> [negate].</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.CrossApplyRewriter">
            <summary>
            Attempts to rewrite cross-apply and outer-apply joins as inner and left-outer joins
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.CrossApplyRewriter.Rewrite(DataAccess.Core.Linq.Common.QueryLanguage,System.Linq.Expressions.Expression)">
            <summary>
            Rewrites the specified language.
            </summary>
            <param name="language">The language.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.CrossApplyRewriter.VisitJoin(DataAccess.Core.Linq.Common.Expressions.JoinExpression)">
            <summary>
            Visits the join.
            </summary>
            <param name="join">The join.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.CrossJoinIsolator">
            <summary>
            Isolates cross joins from other types of joins using nested sub queries
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.CrossJoinIsolator.Isolate(System.Linq.Expressions.Expression)">
            <summary>
            Isolates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.CrossJoinIsolator.VisitSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Visits the select.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.CrossJoinIsolator.VisitJoin(DataAccess.Core.Linq.Common.Expressions.JoinExpression)">
            <summary>
            Visits the join.
            </summary>
            <param name="join">The join.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.CrossJoinIsolator.VisitColumn(DataAccess.Core.Linq.Common.Expressions.ColumnExpression)">
            <summary>
            Visits the column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.CrossJoinRewriter">
            <summary>
            Attempt to rewrite cross joins as inner joins
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.CrossJoinRewriter.Rewrite(System.Linq.Expressions.Expression)">
            <summary>
            Rewrites the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.CrossJoinRewriter.VisitSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Visits the select.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.CrossJoinRewriter.VisitJoin(DataAccess.Core.Linq.Common.Expressions.JoinExpression)">
            <summary>
            Visits the join.
            </summary>
            <param name="join">The join.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.DeclaredAliasGatherer">
            <summary>
             returns the set of all aliases produced by a query source
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.DeclaredAliasGatherer.Gather(System.Linq.Expressions.Expression)">
            <summary>
            Gathers the specified source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.DeclaredAliasGatherer.VisitSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Visits the select.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.DeclaredAliasGatherer.VisitTable(DataAccess.Core.Linq.Common.Expressions.TableExpression)">
            <summary>
            Visits the table.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.NamedValueGatherer">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.NamedValueGatherer.Gather(System.Linq.Expressions.Expression)">
            <summary>
            Gathers the specified expr.
            </summary>
            <param name="expr">The expr.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.NamedValueGatherer.VisitNamedValue(DataAccess.Core.Linq.Common.Expressions.NamedValueExpression)">
            <summary>
            Visits the named value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.OrderByRewriter">
            <summary>
            Moves order-bys to the outermost select if possible
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.OrderByRewriter.Rewrite(DataAccess.Core.Linq.Common.QueryLanguage,System.Linq.Expressions.Expression)">
            <summary>
            Rewrites the specified language.
            </summary>
            <param name="language">The language.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.OrderByRewriter.VisitSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Visits the select.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.OrderByRewriter.VisitSubquery(DataAccess.Core.Linq.Common.Expressions.SubqueryExpression)">
            <summary>
            Visits the subquery.
            </summary>
            <param name="subquery">The subquery.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.OrderByRewriter.VisitJoin(DataAccess.Core.Linq.Common.Expressions.JoinExpression)">
            <summary>
            Visits the join.
            </summary>
            <param name="join">The join.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.OrderByRewriter.PrependOrderings(System.Collections.Generic.IList{DataAccess.Core.Linq.Common.Expressions.OrderExpression})">
            <summary>
            Add a sequence of order expressions to an accumulated list, prepending so as
            to give precedence to the new expressions over any previous expressions
            </summary>
            <param name="newOrderings"></param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.OrderByRewriter.ReverseOrderings">
            <summary>
            Reverses the orderings.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.OrderByRewriter.RebindOrderings(System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.Expressions.OrderExpression},DataAccess.Core.Linq.Common.TableAlias,System.Collections.Generic.HashSet{DataAccess.Core.Linq.Common.TableAlias},System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.ColumnDeclaration})">
            <summary>
            Rebind order expressions to reference a new alias and add to column declarations if necessary
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.OrderByRewriter.BindResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.OrderByRewriter.BindResult.#ctor(System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.ColumnDeclaration},System.Collections.Generic.IEnumerable{DataAccess.Core.Linq.Common.Expressions.OrderExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.Translation.OrderByRewriter.BindResult"/> class.
            </summary>
            <param name="columns">The columns.</param>
            <param name="orderings">The orderings.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Translation.OrderByRewriter.BindResult.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.Translation.OrderByRewriter.BindResult.Orderings">
            <summary>
            Gets the orderings.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.Parameterizer">
            <summary>
            Converts user arguments into named-value parameters
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.Parameterizer.Parameterize(DataAccess.Core.Linq.Common.QueryLanguage,System.Linq.Expressions.Expression)">
            <summary>
            Parameterizes the specified language.
            </summary>
            <param name="language">The language.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.Parameterizer.VisitProjection(DataAccess.Core.Linq.Common.Expressions.ProjectionExpression)">
            <summary>
            Visits the projection.
            </summary>
            <param name="proj">The proj.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.Parameterizer.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the unary.
            </summary>
            <param name="u">The u.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.Parameterizer.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the binary.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.Parameterizer.VisitColumnAssignment(DataAccess.Core.Linq.ColumnAssignment)">
            <summary>
            Visits the column assignment.
            </summary>
            <param name="ca">The ca.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.Parameterizer.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.Parameterizer.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the parameter.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.Parameterizer.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member access.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.QueryBinder">
            <summary>
            Converts LINQ query operators to into custom DbExpression's
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.QueryDuplicator">
            <summary>
            Duplicate the query expression by making a copy with new table aliases
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.RedundantColumnRemover">
            <summary>
            Removes duplicate column declarations that refer to the same underlying column
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.RedundantJoinRemover">
            <summary>
            Removes joins expressions that are identical to joins that already exist
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.RedundantSubqueryRemover">
            <summary>
            Removes select expressions that don't add any additional semantic value
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.ReferencedAliasGatherer">
            <summary>
             returns the set of all aliases produced by a query source
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.ReferencedColumnGatherer">
            <summary>
            Gathers all columns referenced by the given expression
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.RelationshipBinder">
            <summary>
            Translates accesses to relationship members into projections or joins
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.RelationshipIncluder">
            <summary>
            Adds relationship to query results depending on policy
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.SelectGatherer">
            <summary>
            returns the list of SelectExpressions accessible from the source expression
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.SingletonProjectionRewriter">
            <summary>
            Rewrites nested singleton projection into server-side joins
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.SkipToNestedOrderByRewriter">
            <summary>
            Rewrites queries with skip and take to use the nested queries with inverted ordering technique
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.Translation.SkipToNestedOrderByRewriter.language">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.SkipToNestedOrderByRewriter.#ctor(DataAccess.Core.Linq.Common.QueryLanguage)">
            <summary>
            Prevents a default instance of the <see cref="T:DataAccess.Core.Linq.Common.Translation.SkipToNestedOrderByRewriter"/> class from being created.
            </summary>
            <param name="language">The language.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.SkipToNestedOrderByRewriter.Rewrite(DataAccess.Core.Linq.Common.QueryLanguage,System.Linq.Expressions.Expression)">
            <summary>
            Rewrites the specified language.
            </summary>
            <param name="language">The language.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.SkipToNestedOrderByRewriter.VisitSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Visits the select.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.SkipToRowNumberRewriter">
            <summary>
            Rewrites take and skip expressions into uses of TSQL row_number function
            </summary>
        </member>
        <member name="F:DataAccess.Core.Linq.Common.Translation.SkipToRowNumberRewriter.language">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.SkipToRowNumberRewriter.#ctor(DataAccess.Core.Linq.Common.QueryLanguage)">
            <summary>
            Prevents a default instance of the <see cref="T:DataAccess.Core.Linq.Common.Translation.SkipToRowNumberRewriter"/> class from being created.
            </summary>
            <param name="language">The language.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.SkipToRowNumberRewriter.Rewrite(DataAccess.Core.Linq.Common.QueryLanguage,System.Linq.Expressions.Expression)">
            <summary>
            Rewrites the specified language.
            </summary>
            <param name="language">The language.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.Translation.SkipToRowNumberRewriter.VisitSelect(DataAccess.Core.Linq.Common.Expressions.SelectExpression)">
            <summary>
            Visits the select.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.SubqueryRemover">
            <summary>
            Removes one or more SelectExpression's by rewriting the expression tree to not include them, promoting
            their from clause expressions and rewriting any column expressions that may have referenced them to now
            reference the underlying data directly.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.Translation.UnusedColumnRemover">
            <summary>
            Removes column declarations in SelectExpression's that are not referenced
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.TypedSubtreeFinder">
            <summary>
            Finds the first sub-expression that is of a specified type
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypedSubtreeFinder.Find(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Finds the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypedSubtreeFinder.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified exp.
            </summary>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.TypeHelper">
            <summary>
            Type related helper methods
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypeHelper.FindIEnumerable(System.Type)">
            <summary>
            Finds the I enumerable.
            </summary>
            <param name="seqType">Type of the seq.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypeHelper.GetSequenceType(System.Type)">
            <summary>
            Gets the type of the sequence.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypeHelper.GetElementType(System.Type)">
            <summary>
            Gets the type of the element.
            </summary>
            <param name="seqType">Type of the seq.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypeHelper.IsNullableType(System.Type)">
            <summary>
            Determines whether [is nullable type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is nullable type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypeHelper.IsNullAssignable(System.Type)">
            <summary>
            Determines whether [is null assignable] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is null assignable] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypeHelper.GetNonNullableType(System.Type)">
            <summary>
            Gets the type of the non nullable.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypeHelper.GetNullAssignableType(System.Type)">
            <summary>
            Gets the type of the null assignable.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypeHelper.GetNullConstant(System.Type)">
            <summary>
            Gets the null constant.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypeHelper.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Gets the type of the member.
            </summary>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypeHelper.GetDefault(System.Type)">
            <summary>
            Gets the default.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypeHelper.IsReadOnly(System.Reflection.MemberInfo)">
            <summary>
            Determines whether [is read only] [the specified member].
            </summary>
            <param name="member">The member.</param>
            <returns>
              <c>true</c> if [is read only] [the specified member]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.TypeHelper.IsInteger(System.Type)">
            <summary>
            Determines whether the specified type is integer.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is integer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Common.VariableDeclaration">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Common.VariableDeclaration.#ctor(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Common.VariableDeclaration"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.VariableDeclaration.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Common.VariableDeclaration.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.DBQueryProvider.GetExecutionPlan(System.Linq.Expressions.Expression)">
            <summary>
            Convert the query expression into an execution plan
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Linq.DbExpressionTypeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.DbExpressionTypeExtensions.IsDbExpression(System.Linq.Expressions.ExpressionType)">
            <summary>
            Determines whether [is db expression] [the specified et].
            </summary>
            <param name="et">The et.</param>
            <returns>
              <c>true</c> if [is db expression] [the specified et]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:DataAccess.Core.Linq.Interfaces.IHaveMappingEntity">
            <summary>
            
            </summary>
        </member>
        <member name="P:DataAccess.Core.Linq.Interfaces.IHaveMappingEntity.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="T:DataAccess.Core.Linq.Mapping.SauceMapping">
            <summary>
            Provides table and column mapping using sauce rules
            </summary>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.#ctor(DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Linq.Mapping.SauceMapping"/> class.
            </summary>
            <param name="dStore">The d store.</param>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.GetTableId(System.Type)">
            <summary>
            Gets the table id.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.GetEntity(System.Type)">
            <summary>
            Get the meta entity directly corresponding to the CLR type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.GetEntity(System.Type,System.String)">
            <summary>
            Gets the entity.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="tableId">The table id.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.GetEntity(System.Reflection.MemberInfo)">
            <summary>
            Gets the entity.
            </summary>
            <param name="contextMember">The context member.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.CloneEntity(DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Object)">
            <summary>
            Clones the entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.IsColumn(DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified entity is column.
            </summary>
            <param name="entity">The entity.</param>
            <param name="member">The member.</param>
            <returns>
              <c>true</c> if the specified entity is column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.IsMapped(DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified entity is mapped.
            </summary>
            <param name="entity">The entity.</param>
            <param name="member">The member.</param>
            <returns>
              <c>true</c> if the specified entity is mapped; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.IsPrimaryKey(DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Reflection.MemberInfo)">
            <summary>
            Determines whether [is primary key] [the specified entity].
            </summary>
            <param name="entity">The entity.</param>
            <param name="member">The member.</param>
            <returns>
              <c>true</c> if [is primary key] [the specified entity]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.GetPrimaryKey(DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Object)">
            <summary>
            Gets the primary key.
            </summary>
            <param name="entity">The entity.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.GetPrimaryKeyQuery(DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <summary>
            Gets the primary key query.
            </summary>
            <param name="entity">The entity.</param>
            <param name="source">The source.</param>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.GetMappedMembers(DataAccess.Core.Linq.Common.Mapping.MappingEntity)">
            <summary>
            Gets the mapped members.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.CreateMapper(DataAccess.Core.Linq.Common.QueryTranslator)">
            <summary>
            Creates the mapper.
            </summary>
            <param name="translator">The translator.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.GetTableName(DataAccess.Core.Linq.Common.Mapping.MappingEntity)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.GetColumnName(DataAccess.Core.Linq.Common.Mapping.MappingEntity,System.Reflection.MemberInfo)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="entity">The entity.</param>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.GetColumnName(System.Reflection.MemberInfo)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.GetPrimaryKeyMembers(DataAccess.Core.Linq.Common.Mapping.MappingEntity)">
            <summary>
            Gets the primary key members.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Linq.Mapping.SauceMapping.CanBeEvaluatedLocally(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether a given expression can be executed locally. 
            (It contains no parts that should be translated to the target environment.)
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.ObjectBuilder">
            <summary>
            Contains functions that will map a data row to an object
            </summary>
        </member>
        <member name="M:DataAccess.Core.ObjectBuilder.BuildObject(DataAccess.Core.Interfaces.IDataStore,DataAccess.Core.Interfaces.IQueryRow,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Builds a return object
            </summary>
            <param name="dstore">The datastore.</param>
            <param name="dt">The query data to build with</param>
            <param name="ti">The parsed  type info for the object</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.ObjectBuilder.SetConstructorArguments(DataAccess.Core.Interfaces.IDataStore,System.Reflection.ParameterInfo[],DataAccess.Core.Data.TypeInfo,DataAccess.Core.Interfaces.IQueryRow)">
            <summary>
            Gets a array of constructor arguments to build an object with
            </summary>
            <param name="dstore">The datastore.</param>
            <param name="parminfo">The parms for the constructor.</param>
            <param name="ti">The type info</param>
            <param name="row">The row in the result set to use</param>
            <param name="dt">The query result set</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.ObjectBuilder.SetFieldData(DataAccess.Core.Interfaces.IDataStore,DataAccess.Core.Interfaces.IQueryRow,System.Object)">
            <summary>
            Sets the fields on an object
            </summary>
            <param name="dstore">The datastore.</param>
            <param name="row">The row to pull from</param>
            <param name="dataItem">The object to set the data on</param>
        </member>
        <member name="M:DataAccess.Core.ObjectBuilder.SetFieldData(DataAccess.Core.Interfaces.IDataStore,DataAccess.Core.Data.TypeInfo,DataAccess.Core.Interfaces.IQueryRow,System.Object)">
            <summary>
            Sets the fields on an object
            </summary>
            <param name="dstore">The datastore.</param>
            <param name="info">The information for the type</param>
            <param name="row">The row to pull from</param>
            <param name="dataItem">The object to set the data on</param>
        </member>
        <member name="T:DataAccess.Core.ObjectFinders.NoSchemaSupportObjectFinder">
            <summary>
            Will find data object for store that do not support schemas (sql server style)
            Assumes {schema}_{table}
            </summary>
        </member>
        <member name="M:DataAccess.Core.ObjectFinders.NoSchemaSupportObjectFinder.GetObject(System.Collections.Generic.IEnumerable{DataAccess.Core.Data.DBObject},DataAccess.Core.Data.TypeInfo)">
            <summary>
            Returns a dbobject for an object
            </summary>
            <param name="objects">the objects to search</param>
            <param name="typeInfo">The type to lookup for</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.ObjectFinders.SupportsSchemaObjectFinder">
            <summary>
            Will find data objects in a datastore that supports schemas (sql server style)
            </summary>
        </member>
        <member name="M:DataAccess.Core.ObjectFinders.SupportsSchemaObjectFinder.GetObject(System.Collections.Generic.IEnumerable{DataAccess.Core.Data.DBObject},DataAccess.Core.Data.TypeInfo)">
            <summary>
            Returns a dbobject for an object
            </summary>
            <param name="objects">the objects to search</param>
            <param name="typeInfo">The type to lookup for</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.ObjectValidators.DoesNothingObjectVallidator">
            <summary>
            This validator does nothing
            </summary>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.DoesNothingObjectVallidator.ValidateObject(DataAccess.Core.Data.TypeInfo)">
            <summary>
            This does nothing
            </summary>
            <param name="ti"></param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.DoesNothingObjectVallidator.GetObjects(System.Boolean)">
            <summary>
            Returns null
            </summary>
            <param name="forceReload"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.DoesNothingObjectVallidator.GetObjects">
            <summary>
            Returns null
            </summary>
            <returns></returns>
        </member>
        <member name="P:DataAccess.Core.ObjectValidators.DoesNothingObjectVallidator.CanRemoveColumns">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:DataAccess.Core.ObjectValidators.DoesNothingObjectVallidator.CanAddColumns">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:DataAccess.Core.ObjectValidators.DoesNothingObjectVallidator.CanUpdateColumns">
            <summary>
            Not used
            </summary>
        </member>
        <member name="E:DataAccess.Core.ObjectValidators.DoesNothingObjectVallidator.OnObjectCreated">
            <summary>
            This will never fire
            </summary>
        </member>
        <member name="E:DataAccess.Core.ObjectValidators.DoesNothingObjectVallidator.OnObjectModified">
            <summary>
            this will never fire
            </summary>
        </member>
        <member name="T:DataAccess.Core.ObjectValidators.NotifyTableValidator">
            <summary>
            Validates tables on the datastore
            </summary>
        </member>
        <member name="T:DataAccess.Core.ObjectValidators.ObjectValidator">
            <summary>
            Will validate an object against the data store
            </summary>
        </member>
        <member name="F:DataAccess.Core.ObjectValidators.ObjectValidator._dstore">
            <summary>
            The data store that holds this validator
            </summary>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ObjectValidator.ValidateObject(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Validates an objects info against the datastore
            </summary>
            <param name="ti"></param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ObjectValidator.#ctor(DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.ObjectValidators.ObjectValidator"/> class.
            </summary>
            <param name="dStore">The d store.</param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ObjectValidator.GetObjects(System.Boolean)">
            <summary>
            Returns a list of objects from the datastore
            </summary>
            <param name="forceReload">Will force the fetch of a fresh copy</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ObjectValidator.GetObjects">
            <summary>
            Returns a list of objects from the datastore
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ObjectValidator.GetObject(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Gets the object., if you need to change this behavior, see <seealso cref="T:DataAccess.Core.Interfaces.IFindDataObjects"/>
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ObjectValidator.FireCreated(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Fires the created event
            </summary>
            <param name="ti">The ti.</param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ObjectValidator.FireModified(DataAccess.Core.Data.TypeInfo,System.String)">
            <summary>
            Fires the modified event
            </summary>
            <param name="ti">The ti.</param>
            <param name="action">A description of the action taken</param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ObjectValidator.FireModified(DataAccess.Core.Data.TypeInfo,System.String,System.Object[])">
            <summary>
            Fires the modified event
            </summary>
            <param name="ti">The ti.</param>
            <param name="action">A description of the action taken</param>
            <param name="stringFormatData">Allows you to do stirng.format() style action message, just provide the items and a formattable string for action else null</param>
        </member>
        <member name="P:DataAccess.Core.ObjectValidators.ObjectValidator.CanRemoveColumns">
            <summary>
            If false, the schema validator should never try to remove columns
            </summary>
        </member>
        <member name="P:DataAccess.Core.ObjectValidators.ObjectValidator.CanAddColumns">
            <summary>
            If false, the schema validator should never try to add columns
            </summary>
        </member>
        <member name="P:DataAccess.Core.ObjectValidators.ObjectValidator.CanUpdateColumns">
            <summary>
            If false, the schema validator should never try to update columns
            </summary>
        </member>
        <member name="E:DataAccess.Core.ObjectValidators.ObjectValidator.OnObjectCreated">
            <summary>
            This event is fired when an object is added by the validator
            </summary>
        </member>
        <member name="E:DataAccess.Core.ObjectValidators.ObjectValidator.OnObjectModified">
            <summary>
            This event is fired when an object is modified by the validator
            </summary>
        </member>
        <member name="P:DataAccess.Core.ObjectValidators.ObjectValidator.Objects">
            <summary>
            Gets or sets the objects.
            </summary>
            <value>
            The objects.
            </value>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.NotifyTableValidator.#ctor(DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.ObjectValidators.ModifyTableValidator"/> class.
            </summary>
            <param name="dstore">The dstore.</param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.NotifyTableValidator.ValidateObject(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Validates an objects info against the datastore
            </summary>
            <param name="ti"></param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.NotifyTableValidator.CreateNewTable(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Creates a new table.
            </summary>
            <param name="typeInfo">The type info.</param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.NotifyTableValidator.ValidateExistingTable(DataAccess.Core.Data.TypeInfo,DataAccess.Core.Data.DBObject)">
            <summary>
            Validates an existing table.
            </summary>
            <param name="typeInfo">The type info.</param>
            <param name="t">The t.</param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.NotifyTableValidator.GetObjects">
            <summary>
            Returns a list of objects from the datastore
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.NotifyTableValidator.CheckSchema(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Does nothing...
            </summary>
            <param name="ti">The ti.</param>
        </member>
        <member name="T:DataAccess.Core.ObjectValidators.ModifyTableValidator">
            <summary>
            Validates tables on the datastore
            </summary>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ModifyTableValidator.#ctor(DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.ObjectValidators.ModifyTableValidator"/> class.
            </summary>
            <param name="dstore">The dstore.</param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ModifyTableValidator.ValidateObject(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Validates an objects info against the datastore
            </summary>
            <param name="ti"></param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ModifyTableValidator.CreateNewTable(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Creates a new table.
            </summary>
            <param name="typeInfo">The type info.</param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ModifyTableValidator.ValidateExistingTable(DataAccess.Core.Data.TypeInfo,DataAccess.Core.Data.DBObject)">
            <summary>
            Validates an existing table.
            </summary>
            <param name="typeInfo">The type info.</param>
            <param name="t">The t.</param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ModifyTableValidator.CheckForDeletedColumns(DataAccess.Core.Data.TypeInfo,DataAccess.Core.Data.DBObject,System.Collections.Generic.List{DataAccess.Core.Data.Column})">
            <summary>
            Checks for deleted columns.
            </summary>
            <param name="typeInfo">The type info.</param>
            <param name="t">The t.</param>
            <param name="valid">The valid.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ModifyTableValidator.AddTable(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Returns the tables from the data store
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ModifyTableValidator.AddColumn(DataAccess.Core.Data.DataFieldInfo,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Adds the column.
            </summary>
            <param name="field">The field to add</param>
            <param name="ti">The type its being added to</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ModifyTableValidator.RemoveColumn(DataAccess.Core.Data.DataFieldInfo,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Removed a column from a data table
            </summary>
            <param name="field">The field to remove</param>
            <param name="ti">The type to remove it from</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ModifyTableValidator.ModifyColumn(DataAccess.Core.Data.DataFieldInfo,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Modifies a column from a data table
            </summary>
            <param name="dfi">The data field.</param>
            <param name="typeInfo">The type info.</param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ModifyTableValidator.GetObjects">
            <summary>
            Returns a list of objects from the datastore
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ModifyTableValidator.CheckSchema(DataAccess.Core.Data.TypeInfo)">
            <summary>
            executes a command to add a schema
            </summary>
            <param name="ti">The ti.</param>
        </member>
        <member name="T:DataAccess.Core.ObjectValidators.ViewValidator">
            <summary>
            Does view validation
            </summary>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ViewValidator.#ctor(DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.ObjectValidators.ViewValidator"/> class.
            </summary>
            <param name="dstore">The dstore.</param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ViewValidator.ValidateObject(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Validates an objects info against the datastore
            </summary>
            <param name="ti"></param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ViewValidator.ValidateExistingView(DataAccess.Core.Data.TypeInfo,DataAccess.Core.Data.DBObject)">
            <summary>
            Validates an  existing view.
            </summary>
            <param name="ti">The ti.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ViewValidator.CreateNewView(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Creates the new view.
            </summary>
            <param name="ti">The ti.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.ObjectValidators.ViewValidator.GetObjects">
            <summary>
            Returns a list of objects from the datastore
            </summary>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.Schema.DoesNothingValidator">
            <summary>
            This schema validator does nothing
            </summary>
        </member>
        <member name="M:DataAccess.Core.Schema.DoesNothingValidator.GetTables">
            <summary>
            Always returns an empty list
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Schema.DoesNothingValidator.AddColumn(DataAccess.Core.Data.DataFieldInfo,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Always returns true
            </summary>
        </member>
        <member name="M:DataAccess.Core.Schema.DoesNothingValidator.RemoveColumn(DataAccess.Core.Data.DataFieldInfo,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Always returns true
            </summary>
        </member>
        <member name="M:DataAccess.Core.Schema.DoesNothingValidator.ValidateType(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:DataAccess.Core.Schema.DoesNothingValidator.GetTables(System.Boolean)">
            <summary>
            Always returns an empty list
            </summary>
        </member>
        <member name="P:DataAccess.Core.Schema.DoesNothingValidator.TableValidator">
            <summary>
            These are empty properties
            </summary>
        </member>
        <member name="P:DataAccess.Core.Schema.DoesNothingValidator.ViewValidator">
            <summary>
            These are empty properties
            </summary>
        </member>
        <member name="E:DataAccess.Core.Schema.DoesNothingValidator.OnObjectCreated">
            <summary>
            Occurs when [on object created].
            </summary>
        </member>
        <member name="E:DataAccess.Core.Schema.DoesNothingValidator.OnObjectModified">
            <summary>
            Occurs when [on object modified].
            </summary>
        </member>
        <member name="T:DataAccess.Core.Schema.ModifySchemaValidator">
            <summary>
            Performs schema validation/modification of a data store table
            </summary>
        </member>
        <member name="T:DataAccess.Core.Schema.SchemaValidator">
            <summary>
            A generic schema validator
            </summary>
        </member>
        <member name="M:DataAccess.Core.Schema.SchemaValidator.#ctor(DataAccess.Core.Interfaces.IDataStore,DataAccess.Core.Interfaces.IDatastoreObjectValidator,DataAccess.Core.Interfaces.IDatastoreObjectValidator)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Schema.SchemaValidator"/> class.
            </summary>
            <param name="dstore">The dstore.</param>
            <param name="tValidator">The table validator.</param>
            <param name="vValidator">The view validator.</param>
        </member>
        <member name="M:DataAccess.Core.Schema.SchemaValidator.LoadObjectInfo(DataAccess.Core.Data.Results.QueryRow,DataAccess.Core.Data.QueryData)">
            <summary>
            Loads the object info.
            </summary>
            <param name="tables">The tables.</param>
            <param name="columns">The columns.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Schema.SchemaValidator.AddColumnToDBObject(DataAccess.Core.Data.Results.QueryRow,DataAccess.Core.Data.DBObject)">
            <summary>
            Adds the column to DB object.
            </summary>
            <param name="columns">The columns.</param>
            <param name="t">The t.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:DataAccess.Core.Schema.SchemaValidator.GetDataTypeString(DataAccess.Core.Data.Results.QueryRow)">
            <summary>
            Returns a Datatype name string for sql, i.e. varchar(20)
            </summary>
            <param name="column"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.Schema.SchemaValidator.ValidateType(DataAccess.Core.Data.TypeInfo)">
            <summary>
            Performs schema validation/modification to match the type
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:DataAccess.Core.Schema.SchemaValidator.TableValidator">
            <summary>
            The component to use when validating tables
            </summary>
        </member>
        <member name="P:DataAccess.Core.Schema.SchemaValidator.ViewValidator">
            <summary>
            The component to use when validating views
            </summary>
        </member>
        <member name="P:DataAccess.Core.Schema.SchemaValidator.CanRemoveColumns">
            <summary>
            If false, the schema validator will never remove columns (defaults to false)
            </summary>
        </member>
        <member name="P:DataAccess.Core.Schema.SchemaValidator.CanAddColumns">
            <summary>
            If false, the schema validator will never add columns (defaults to true)
            </summary>
        </member>
        <member name="P:DataAccess.Core.Schema.SchemaValidator.CanUpdateColumns">
            <summary>
            If false, the schema validator will never update columns (defaults to true)
            </summary>
        </member>
        <member name="M:DataAccess.Core.Schema.ModifySchemaValidator.#ctor(DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Schema.ModifySchemaValidator"/> class.
            </summary>
            <param name="dStore">The data store to grab the connection from</param>
        </member>
        <member name="T:DataAccess.Core.Schema.NotifyValidator">
            <summary>
            Performs schema validation/ throws exceptions when discrpencies are found
            </summary>
        </member>
        <member name="M:DataAccess.Core.Schema.NotifyValidator.#ctor(DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.Schema.NotifyValidator"/> class.
            </summary>
            <param name="dStore">The data store to grab the connection from</param>
        </member>
        <member name="T:DataAccess.Core.TransactionContext">
            <summary>
            Context to use for transactions
            </summary>
        </member>
        <member name="M:DataAccess.Core.TransactionContext.#ctor(DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.TransactionContext"/> class.
            </summary>
            <param name="store">The datastore to use.</param>
        </member>
        <member name="M:DataAccess.Core.TransactionContext.Rollback">
            <summary>
            Rollbacks a transaction
            </summary>
        </member>
        <member name="M:DataAccess.Core.TransactionContext.Commit">
            <summary>
            Commits a transaction
            </summary>
        </member>
        <member name="M:DataAccess.Core.TransactionContext.StartNewTransaction">
            <summary>
            Starts a new transaction.
            </summary>
        </member>
        <member name="M:DataAccess.Core.TransactionContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:DataAccess.Core.TransactionContext.Instance">
            <summary>
            Operations ran here will happen in the context of a transaction
            </summary>
        </member>
        <member name="P:DataAccess.Core.TransactionContext.TransactionInfo">
            <summary>
            Information about the transaction
            </summary>
        </member>
        <member name="P:DataAccess.Core.TransactionContext.CommitOnDispose">
            <summary>
            If true, on dispose the transaction will commit else rollback
            </summary>
        </member>
        <member name="T:DataAccess.Core.StandardCLRConverter">
            <summary>
            A generic type converter
            </summary>
        </member>
        <member name="M:DataAccess.Core.StandardCLRConverter.ConvertToType(System.Object,System.Type)">
            <summary>
            Converts a data type
            </summary>
            <param name="p">The object to convert</param>
            <param name="type">The type to convert it to</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.StandardCLRConverter.ConvertToType``1(System.Object)">
            <summary>
            Converts a data type
            </summary>
            <typeparam name="T">The type to convert it to</typeparam>
            <param name="p">The object to convert</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.DataAccessExtensions">
            <summary>
            Extensions on various things
            </summary>
        </member>
        <member name="M:DataAccess.Core.DataAccessExtensions.IsSystemType(System.Type)">
            <summary>
            Determines whether [is system type] [the specified t].
            </summary>
            <param name="t">The t.</param>
            <returns>
              <c>true</c> if [is system type] [the specified t]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DataAccess.Core.DataAccessExtensions.GetWhereString(DataAccess.Core.Data.WhereType)">
            <summary>
            Translates the where type to sql
            </summary>
            <param name="type">the where type</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataAccessExtensions.GetSmallerList(System.Collections.IList,System.Int32)">
            <summary>
            Takes a list and creates a new smaller list of the specified size (Copies the items from the old list into the new one)
            </summary>
            <param name="source"></param>
            <param name="numItems"></param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.DataAccessExtensions.LoadResource(System.Reflection.Assembly,System.String)">
            <summary>
            Returns a string resource
            </summary>
            <param name="asmb">The assembly to load it from</param>
            <param name="resourceName">The resource name</param>
            <returns></returns>
        </member>
        <member name="T:DataAccess.Core.TypeParser">
            <summary>
            A caching type information parser, the type will be parsed once and then stored for later retrieval,
            NOTE: Type parsing is expensive, so make sure the cache does not invalidate very often
            </summary>
        </member>
        <member name="M:DataAccess.Core.TypeParser.FireOnTypeParsed(DataAccess.Core.Events.TypeParsedEventArgs)">
            <summary>
            Triggers the OnTypeParsed event.
            </summary>
        </member>
        <member name="F:DataAccess.Core.TypeParser._connection">
            <summary>
            The data store using this parser
            </summary>
        </member>
        <member name="M:DataAccess.Core.TypeParser.#ctor(DataAccess.Core.Interfaces.IDataStore,DataAccess.Core.Interfaces.ICacheProvider{System.Type,DataAccess.Core.Data.TypeInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:DataAccess.Core.TypeParser"/> class.
            </summary>
            <param name="dstore">The data store using this parser</param>
            <param name="CacheProvider">The cache provider.</param>
        </member>
        <member name="M:DataAccess.Core.TypeParser.#ctor(DataAccess.Core.Interfaces.IDataStore)">
            <summary>
            Will set up Dictionary Cache by default
            </summary>
            <param name="dstore"></param>
        </member>
        <member name="M:DataAccess.Core.TypeParser.GetTypeFields(System.Type)">
            <summary>
            Gets the types fields.
            </summary>
            <param name="dataType">The type to parse</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.TypeParser.GetPrimaryKeys(System.Type)">
            <summary>
            Gets the primary keys for a type
            </summary>
            <param name="dataType">The type to parse</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.TypeParser.GetTypeInfo(System.Type)">
            <summary>
            Gets a lot of information from a type
            </summary>
            <param name="type">The type to parse</param>
            <returns></returns>
        </member>
        <member name="M:DataAccess.Core.TypeParser.ParseFunctionAttributes(System.Type,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Parses the additional init and OnTableCreate attributes
            </summary>
            <param name="type">The type to parse</param>
            <param name="toAdd">What to add the data to</param>
        </member>
        <member name="M:DataAccess.Core.TypeParser.ParseBypass(System.Type,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Parses the bypass validation attribute
            </summary>
            <param name="type">The type to parse</param>
            <param name="toAdd">What to add the data to</param>
        </member>
        <member name="M:DataAccess.Core.TypeParser.ParseDataFields(System.Type,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Parses data field information from a type
            </summary>
            <param name="type">The type to parse</param>
            <param name="toAdd">What to add the data to</param>
        </member>
        <member name="M:DataAccess.Core.TypeParser.ParseLoad(DataAccess.Core.Data.DataFieldInfo,DataAccess.Core.Attributes.DataFieldAttribute)">
            <summary>
            Determines if a field should be loaded
            </summary>
            <param name="dfi">The field to check</param>
            <param name="dField">The data attribute if present, null otherwise</param>
        </member>
        <member name="M:DataAccess.Core.TypeParser.ParseSetOnInsert(DataAccess.Core.Data.DataFieldInfo,DataAccess.Core.Attributes.DataFieldAttribute)">
            <summary>
            Determines if a field should be inserted
            </summary>
            <param name="dfi">The field to check</param>
            <param name="dField">The data attribute if present, null otherwise</param>
        </member>
        <member name="M:DataAccess.Core.TypeParser.ParseFieldName(DataAccess.Core.Data.DataFieldInfo,DataAccess.Core.Attributes.DataFieldAttribute,System.Reflection.PropertyInfo)">
            <summary>
            Determines a fields name to use on the data store
            </summary>
            <param name="dfi">The field to check</param>
            <param name="dField">The data attribute if present, null otherwise</param>
            <param name="pi">The property information for the field</param>
        </member>
        <member name="M:DataAccess.Core.TypeParser.ParsePropertyInfo(DataAccess.Core.Data.DataFieldInfo,System.Reflection.PropertyInfo)">
            <summary>
            Gets some stuff out of the property info
            </summary>
            <param name="dfi">The field to check</param>
            <param name="pi">The property information for the field</param>
        </member>
        <member name="M:DataAccess.Core.TypeParser.ParsePrimaryFieldType(DataAccess.Core.Data.DataFieldInfo,System.Reflection.PropertyInfo)">
            <summary>
            If a field has a primary key type defined, gets the information for it
            </summary>
            <param name="dfi">The field to check</param>
            <param name="pi">The property information for the field</param>
        </member>
        <member name="M:DataAccess.Core.TypeParser.ParseTableName(System.Type,DataAccess.Core.Data.TypeInfo)">
            <summary>
            Determines the table name to use on the data store
            </summary>
            <param name="type">The type</param>
            <param name="toAdd">What to add the data to</param>
        </member>
        <member name="M:DataAccess.Core.TypeParser.GenTableName(System.Type)">
            <summary>
            Adds an s to the table name if there is not one there already
            </summary>
            <param name="type">The type to check</param>
            <returns></returns>
        </member>
        <member name="E:DataAccess.Core.TypeParser.OnTypeParsed">
            <summary>
            Occurs when a type is parsed
            </summary>
        </member>
        <member name="P:DataAccess.Core.TypeParser.Cache">
            <summary>
            The type information cache provider
            </summary>
        </member>
    </members>
</doc>
